{
  "version": 3,
  "sources": ["../../@nivo/scatterplot/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs", "../../@nivo/scatterplot/src/compute.ts", "../../@nivo/scatterplot/src/hooks.ts", "../../@nivo/scatterplot/src/Node.tsx", "../../@nivo/scatterplot/src/props.tsx", "../../@nivo/scatterplot/src/Tooltip.tsx", "../../@nivo/scatterplot/src/ScatterPlotAnnotations.tsx", "../../@nivo/scatterplot/src/Nodes.tsx", "../../@nivo/scatterplot/src/Mesh.tsx", "../../@nivo/scatterplot/src/ScatterPlot.tsx", "../../@nivo/scatterplot/src/ResponsiveScatterPlot.tsx", "../../@nivo/scatterplot/src/ScatterPlotCanvas.tsx", "../../@nivo/scatterplot/src/ResponsiveScatterPlotCanvas.tsx"],
  "sourcesContent": ["// src/index.ts\nimport { Globals } from \"@react-spring/core\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport { createStringInterpolator, colors } from \"@react-spring/shared\";\nimport { createHost } from \"@react-spring/animated\";\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n  if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n  if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))\n    return value + \"px\";\n  return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false;\n  }\n  const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props;\n  const values = Object.values(attributes);\n  const names = Object.keys(attributes).map(\n    (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(\n      /([A-Z])/g,\n      // Attributes are written in dash case\n      (n) => \"-\" + n.toLowerCase()\n    ))\n  );\n  if (children !== void 0) {\n    instance.textContent = children;\n  }\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name]);\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value);\n      } else {\n        instance.style[name] = value;\n      }\n    }\n  }\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i]);\n  });\n  if (className !== void 0) {\n    instance.className = className;\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop;\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft;\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute(\"viewBox\", viewBox);\n  }\n}\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\nvar prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\"Webkit\", \"Ms\", \"Moz\", \"O\"];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach((prefix) => acc[prefixKey(prefix, prop)] = acc[prop]);\n  return acc;\n}, isUnitlessNumber);\n\n// src/AnimatedStyle.ts\nimport { AnimatedObject } from \"@react-spring/animated\";\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver\n} from \"@react-spring/shared\";\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends AnimatedObject {\n  constructor({ x, y, z, ...style }) {\n    const inputs = [];\n    const transforms = [];\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0]);\n      transforms.push((xyz) => [\n        `translate3d(${xyz.map((v) => addUnit(v, \"px\")).join(\",\")})`,\n        // prettier-ignore\n        isValueIdentity(xyz, 0)\n      ]);\n    }\n    eachProp(style, (value, key) => {\n      if (key === \"transform\") {\n        inputs.push([value || \"\"]);\n        transforms.push((transform) => [transform, transform === \"\"]);\n      } else if (domTransforms.test(key)) {\n        delete style[key];\n        if (is.und(value)) return;\n        const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n        inputs.push(toArray(value));\n        transforms.push(\n          key === \"rotate3d\" ? ([x2, y2, z2, deg]) => [\n            `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`,\n            isValueIdentity(deg, 0)\n          ] : (input) => [\n            `${key}(${input.map((v) => addUnit(v, unit)).join(\",\")})`,\n            isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n          ]\n        );\n      }\n    });\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms);\n    }\n    super(style);\n  }\n};\nvar FluidTransform = class extends FluidValue {\n  constructor(inputs, transforms) {\n    super();\n    this.inputs = inputs;\n    this.transforms = transforms;\n    this._value = null;\n  }\n  get() {\n    return this._value || (this._value = this._get());\n  }\n  _get() {\n    let transform = \"\";\n    let identity = true;\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0]);\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      );\n      transform += \" \" + t;\n      identity = identity && id;\n    });\n    return identity ? \"none\" : transform;\n  }\n  // Start observing our inputs once we have an observer.\n  observerAdded(count) {\n    if (count == 1)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      );\n  }\n  // Stop observing our inputs once we have no observers.\n  observerRemoved(count) {\n    if (count == 0)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      );\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._value = null;\n    }\n    callFluidObservers(this, event);\n  }\n};\n\n// src/primitives.ts\nvar primitives = [\n  \"a\",\n  \"abbr\",\n  \"address\",\n  \"area\",\n  \"article\",\n  \"aside\",\n  \"audio\",\n  \"b\",\n  \"base\",\n  \"bdi\",\n  \"bdo\",\n  \"big\",\n  \"blockquote\",\n  \"body\",\n  \"br\",\n  \"button\",\n  \"canvas\",\n  \"caption\",\n  \"cite\",\n  \"code\",\n  \"col\",\n  \"colgroup\",\n  \"data\",\n  \"datalist\",\n  \"dd\",\n  \"del\",\n  \"details\",\n  \"dfn\",\n  \"dialog\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"em\",\n  \"embed\",\n  \"fieldset\",\n  \"figcaption\",\n  \"figure\",\n  \"footer\",\n  \"form\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"head\",\n  \"header\",\n  \"hgroup\",\n  \"hr\",\n  \"html\",\n  \"i\",\n  \"iframe\",\n  \"img\",\n  \"input\",\n  \"ins\",\n  \"kbd\",\n  \"keygen\",\n  \"label\",\n  \"legend\",\n  \"li\",\n  \"link\",\n  \"main\",\n  \"map\",\n  \"mark\",\n  \"menu\",\n  \"menuitem\",\n  \"meta\",\n  \"meter\",\n  \"nav\",\n  \"noscript\",\n  \"object\",\n  \"ol\",\n  \"optgroup\",\n  \"option\",\n  \"output\",\n  \"p\",\n  \"param\",\n  \"picture\",\n  \"pre\",\n  \"progress\",\n  \"q\",\n  \"rp\",\n  \"rt\",\n  \"ruby\",\n  \"s\",\n  \"samp\",\n  \"script\",\n  \"section\",\n  \"select\",\n  \"small\",\n  \"source\",\n  \"span\",\n  \"strong\",\n  \"style\",\n  \"sub\",\n  \"summary\",\n  \"sup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"textarea\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"time\",\n  \"title\",\n  \"tr\",\n  \"track\",\n  \"u\",\n  \"ul\",\n  \"var\",\n  \"video\",\n  \"wbr\",\n  // SVG\n  \"circle\",\n  \"clipPath\",\n  \"defs\",\n  \"ellipse\",\n  \"foreignObject\",\n  \"g\",\n  \"image\",\n  \"line\",\n  \"linearGradient\",\n  \"mask\",\n  \"path\",\n  \"pattern\",\n  \"polygon\",\n  \"polyline\",\n  \"radialGradient\",\n  \"rect\",\n  \"stop\",\n  \"svg\",\n  \"text\",\n  \"tspan\"\n];\n\n// src/index.ts\nexport * from \"@react-spring/core\";\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors\n});\nvar host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: (style) => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props\n});\nvar animated = host.animated;\nexport {\n  animated as a,\n  animated\n};\n", "import get from 'lodash/get.js'\nimport isString from 'lodash/isString.js'\nimport isNumber from 'lodash/isNumber.js'\nimport isPlainObject from 'lodash/isPlainObject.js'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n", "import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n", "import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseDown?.(node, event),\n        [node, onMouseDown]\n    )\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseUp?.(node, event),\n        [node, onMouseUp]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onDoubleClick?.(node, event),\n        [node, onDoubleClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseDown={isInteractive ? handleMouseDown : undefined}\n            onMouseUp={isInteractive ? handleMouseUp : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onDoubleClick={isInteractive ? handleDoubleClick : undefined}\n        />\n    )\n}\n", "import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n    isInteractive: true,\n    debugMesh: false,\n    tooltip: Tooltip,\n    markers: [],\n    legends: [],\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n", "import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onMouseDown?: ScatterPlotCommonProps<RawDatum>['onMouseDown']\n    onMouseUp?: ScatterPlotCommonProps<RawDatum>['onMouseUp']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    onDoubleClick?: ScatterPlotCommonProps<RawDatum>['onDoubleClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleMouseDown = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onMouseDown?.(node, event),\n        [onMouseDown]\n    )\n    const handleMouseUp = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onMouseUp?.(node, event),\n        [onMouseUp]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n    const handleDoubleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onDoubleClick?.(node, event),\n        [onDoubleClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onMouseDown: isInteractive ? handleMouseDown : undefined,\n                    onMouseUp: isInteractive ? handleMouseUp : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                    onDoubleClick: isInteractive ? handleDoubleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onMouseDown?: ScatterPlotCommonProps<RawDatum>['onMouseDown']\n    onMouseUp?: ScatterPlotCommonProps<RawDatum>['onMouseUp']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    onDoubleClick?: ScatterPlotCommonProps<RawDatum>['onDoubleClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleMouseDown = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onMouseDown?.(node, event)\n        },\n        [onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onMouseUp?.(node, event)\n        },\n        [onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onDoubleClick?.(node, event)\n        },\n        [onDoubleClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n            onDoubleClick={handleDoubleClick}\n            debug={debug}\n        />\n    )\n}\n", "import { createElement, Fragment, ReactNode, useMemo, forwardRef, Ref, ReactElement } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers, WithChartRef } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<SVGSVGElement>\n}\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    forwardedRef,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onClick={onClick}\n                onDoubleClick={onDoubleClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onClick={onClick}\n                onDoubleClick={onDoubleClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: ScatterPlotSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerScatterPlot<RawDatum>\n                {...props}\n                isInteractive={isInteractive}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <RawDatum extends ScatterPlotDatum>(\n    props: WithChartRef<ScatterPlotSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<ScatterPlotSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <ScatterPlot<RawDatum> {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends ScatterPlotDatum>(\n    props: WithChartRef<ResponsiveProps<ScatterPlotSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n", "import {\n    Ref,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n    ReactElement,\n} from 'react'\nimport {\n    Container,\n    useDimensions,\n    getRelativeCursor,\n    isCursorInRect,\n    mergeRefs,\n    WithChartRef,\n} from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    role,\n    forwardedRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n                }\n\n                if (enableGridY) {\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n                }\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave?.(currentNode, event)\n                    onMouseEnter?.(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter?.(node, event)\n                }\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n                if (currentNode) onMouseLeave?.(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            if (currentNode) onMouseLeave?.(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onMouseDown) {\n                const node = getNodeFromMouseEvent(event)\n                if (node) onMouseDown(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onMouseUp) {\n                const node = getNodeFromMouseEvent(event)\n                if (node) onMouseUp(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                if (node) onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onDoubleClick) {\n                const node = getNodeFromMouseEvent(event)\n                if (node) onDoubleClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onDoubleClick]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseDown={isInteractive ? handleMouseDown : undefined}\n            onMouseUp={isInteractive ? handleMouseUp : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onDoubleClick={isInteractive ? handleDoubleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container\n            isInteractive={isInteractive}\n            renderWrapper={renderWrapper}\n            theme={theme}\n            animate={false}\n        >\n            <InnerScatterPlotCanvas<RawDatum>\n                {...props}\n                isInteractive={isInteractive}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <RawDatum extends ScatterPlotDatum>(\n    props: WithChartRef<ScatterPlotCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n", "import { ResponsiveWrapper, WithChartRef, ResponsiveProps } from '@nivo/core'\nimport { forwardRef, Ref, ReactElement } from 'react'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<ScatterPlotCanvasProps<RawDatum>>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <ScatterPlotCanvas {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends ScatterPlotDatum>(\n    props: WithChartRef<ResponsiveProps<ScatterPlotCanvasProps<RawDatum>>, HTMLCanvasElement>\n) => ReactElement\n"],
  "mappings": "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CA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AA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",
  "names": ["n", "i", "z", "z2", "t", "getNodeSizeGenerator", "size", "isNumber", "isPlainObject", "isString", "key", "Error", "Array", "isArray", "values", "length", "sizes", "sizeScale", "scaleLinear", "domain", "range", "datum", "get", "useScatterPlot", "_ref", "data", "xScaleSpec", "xFormat", "yScaleSpec", "yFormat", "width", "height", "nodeId", "nodeSize", "colors", "_useMemo", "useMemo", "computeXYScalesForSeries", "series", "xScale", "yScale", "formatX", "useValueFormatter", "formatY", "getNodeId", "usePropertyAccessor", "rawNodes", "points", "forEach", "serie", "d", "serieIndex", "point", "index", "serieId", "id", "x", "position", "xValue", "formattedX", "y", "yValue", "formattedY", "push", "_extends", "getNodeSize", "getColor", "useOrdinalColorScale", "nodes", "map", "rawNode", "color", "legendData", "label", "useScatterPlotAnnotations", "items", "annotations", "useAnnotations", "getPosition", "node", "getDimensions", "interpolateRadius", "commonDefaultProps", "type", "min", "max", "enableGridX", "enableGridY", "axisTop", "axisRight", "axisBottom", "axisLeft", "nodeComponent", "style", "blendMode", "isInteractive", "onMouseEnter", "onMouseMove", "onMouseLeave", "onMouseDown", "onMouseUp", "onClick", "onDoubleClick", "handleMouseEnter", "useCallback", "event", "handleMouseMove", "handleMouseLeave", "handleMouseDown", "handleMouseUp", "handleClick", "handleDoubleClick", "_jsx", "animated", "circle", "cx", "cy", "r", "to", "fill", "mixBlendMode", "undefined", "scheme", "debugMesh", "tooltip", "BasicTooltip", "value", "enableChip", "markers", "legends", "svgDefaultProps", "layers", "role", "useMesh", "animate", "motionConfig", "canvasDefaultProps", "pixelRatio", "window", "devicePixelRatio", "renderNode", "ctx", "beginPath", "arc", "Math", "PI", "fillStyle", "ScatterPlotAnnotations", "boundAnnotations", "_Fragment", "children", "annotation", "i", "Annotation", "getNodeKey", "regularTransition", "leaveTransition", "Nodes", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "transition", "useTransition", "keys", "from", "enter", "update", "leave", "immediate", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "createElement", "Mesh", "debug", "BaseMesh", "InnerScatterPlot", "_ref$xScale", "_ref$yScale", "partialMargin", "margin", "_ref$layers", "_ref$colors", "_ref$blendMode", "_ref$nodeId", "_ref$nodeSize", "_ref$nodeComponent", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "_ref$axisBottom", "_ref$axisLeft", "_ref$annotations", "_ref$isInteractive", "_ref$useMesh", "_ref$debugMesh", "_ref$tooltip", "_ref$markers", "_ref$legends", "_ref$role", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "forwardedRef", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "_useScatterPlot", "customLayerProps", "layerById", "grid", "axes", "mesh", "includes", "Grid", "xValues", "yValues", "Axes", "top", "right", "bottom", "left", "CartesianMarkers", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "SvgWrapper", "ref", "layer", "Fragment", "ScatterPlot", "forwardRef", "_ref2", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "theme", "renderWrapper", "props", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveScatterPlot", "defaultWidth", "defaultHeight", "onResize", "debounceResize", "ResponsiveWrapper", "InnerScatterPlotCanvas", "_ref$pixelRatio", "_ref$renderNode", "canvasEl", "useRef", "useTheme", "_useState", "useState", "currentNode", "setCurrentNode", "_useVoronoiMesh", "useVoronoiMesh", "delaunay", "voronoi", "useEffect", "current", "getContext", "scale", "background", "fillRect", "translate", "lineWidth", "line", "strokeWidth", "strokeStyle", "stroke", "renderGridLinesToCanvas", "axis", "renderAnnotationsToCanvas", "renderAxesToCanvas", "renderVoronoiToCanvas", "renderVoronoiCellToCanvas", "renderLegendToCanvas", "getNodeFromMouseEvent", "_getRelativeCursor", "getRelativeCursor", "isCursorInRect", "nodeIndex", "find", "handleMouseHover", "mergeRefs", "cursor", "ScatterPlotCanvas", "ResponsiveScatterPlotCanvas"]
}
