{
  "version": 3,
  "sources": ["../../@nivo/bar/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs", "../../@nivo/canvas/src/roundedRect.ts", "../../@nivo/bar/src/BarAnnotations.tsx", "../../@nivo/bar/src/BarLegends.tsx", "../../@nivo/bar/src/BarItem.tsx", "../../@nivo/bar/src/BarTooltip.tsx", "../../@nivo/bar/src/defaults.ts", "../../@nivo/bar/src/renderBar.ts", "../../@nivo/bar/src/compute/common.ts", "../../@nivo/bar/src/compute/grouped.ts", "../../@nivo/bar/src/compute/stacked.ts", "../../@nivo/bar/src/compute/legends.ts", "../../@nivo/bar/src/compute/totals.ts", "../../@nivo/bar/src/hooks.ts", "../../@nivo/bar/src/BarTotals.tsx", "../../@nivo/bar/src/Bar.tsx", "../../@nivo/bar/src/BarCanvas.tsx", "../../@nivo/bar/src/ResponsiveBar.tsx", "../../@nivo/bar/src/ResponsiveBarCanvas.tsx"],
  "sourcesContent": ["// src/index.ts\nimport { Globals } from \"@react-spring/core\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport { createStringInterpolator, colors } from \"@react-spring/shared\";\nimport { createHost } from \"@react-spring/animated\";\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n  if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n  if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))\n    return value + \"px\";\n  return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false;\n  }\n  const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props;\n  const values = Object.values(attributes);\n  const names = Object.keys(attributes).map(\n    (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(\n      /([A-Z])/g,\n      // Attributes are written in dash case\n      (n) => \"-\" + n.toLowerCase()\n    ))\n  );\n  if (children !== void 0) {\n    instance.textContent = children;\n  }\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name]);\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value);\n      } else {\n        instance.style[name] = value;\n      }\n    }\n  }\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i]);\n  });\n  if (className !== void 0) {\n    instance.className = className;\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop;\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft;\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute(\"viewBox\", viewBox);\n  }\n}\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\nvar prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\"Webkit\", \"Ms\", \"Moz\", \"O\"];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach((prefix) => acc[prefixKey(prefix, prop)] = acc[prop]);\n  return acc;\n}, isUnitlessNumber);\n\n// src/AnimatedStyle.ts\nimport { AnimatedObject } from \"@react-spring/animated\";\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver\n} from \"@react-spring/shared\";\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends AnimatedObject {\n  constructor({ x, y, z, ...style }) {\n    const inputs = [];\n    const transforms = [];\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0]);\n      transforms.push((xyz) => [\n        `translate3d(${xyz.map((v) => addUnit(v, \"px\")).join(\",\")})`,\n        // prettier-ignore\n        isValueIdentity(xyz, 0)\n      ]);\n    }\n    eachProp(style, (value, key) => {\n      if (key === \"transform\") {\n        inputs.push([value || \"\"]);\n        transforms.push((transform) => [transform, transform === \"\"]);\n      } else if (domTransforms.test(key)) {\n        delete style[key];\n        if (is.und(value)) return;\n        const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n        inputs.push(toArray(value));\n        transforms.push(\n          key === \"rotate3d\" ? ([x2, y2, z2, deg]) => [\n            `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`,\n            isValueIdentity(deg, 0)\n          ] : (input) => [\n            `${key}(${input.map((v) => addUnit(v, unit)).join(\",\")})`,\n            isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n          ]\n        );\n      }\n    });\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms);\n    }\n    super(style);\n  }\n};\nvar FluidTransform = class extends FluidValue {\n  constructor(inputs, transforms) {\n    super();\n    this.inputs = inputs;\n    this.transforms = transforms;\n    this._value = null;\n  }\n  get() {\n    return this._value || (this._value = this._get());\n  }\n  _get() {\n    let transform = \"\";\n    let identity = true;\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0]);\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      );\n      transform += \" \" + t;\n      identity = identity && id;\n    });\n    return identity ? \"none\" : transform;\n  }\n  // Start observing our inputs once we have an observer.\n  observerAdded(count) {\n    if (count == 1)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      );\n  }\n  // Stop observing our inputs once we have no observers.\n  observerRemoved(count) {\n    if (count == 0)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      );\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._value = null;\n    }\n    callFluidObservers(this, event);\n  }\n};\n\n// src/primitives.ts\nvar primitives = [\n  \"a\",\n  \"abbr\",\n  \"address\",\n  \"area\",\n  \"article\",\n  \"aside\",\n  \"audio\",\n  \"b\",\n  \"base\",\n  \"bdi\",\n  \"bdo\",\n  \"big\",\n  \"blockquote\",\n  \"body\",\n  \"br\",\n  \"button\",\n  \"canvas\",\n  \"caption\",\n  \"cite\",\n  \"code\",\n  \"col\",\n  \"colgroup\",\n  \"data\",\n  \"datalist\",\n  \"dd\",\n  \"del\",\n  \"details\",\n  \"dfn\",\n  \"dialog\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"em\",\n  \"embed\",\n  \"fieldset\",\n  \"figcaption\",\n  \"figure\",\n  \"footer\",\n  \"form\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"head\",\n  \"header\",\n  \"hgroup\",\n  \"hr\",\n  \"html\",\n  \"i\",\n  \"iframe\",\n  \"img\",\n  \"input\",\n  \"ins\",\n  \"kbd\",\n  \"keygen\",\n  \"label\",\n  \"legend\",\n  \"li\",\n  \"link\",\n  \"main\",\n  \"map\",\n  \"mark\",\n  \"menu\",\n  \"menuitem\",\n  \"meta\",\n  \"meter\",\n  \"nav\",\n  \"noscript\",\n  \"object\",\n  \"ol\",\n  \"optgroup\",\n  \"option\",\n  \"output\",\n  \"p\",\n  \"param\",\n  \"picture\",\n  \"pre\",\n  \"progress\",\n  \"q\",\n  \"rp\",\n  \"rt\",\n  \"ruby\",\n  \"s\",\n  \"samp\",\n  \"script\",\n  \"section\",\n  \"select\",\n  \"small\",\n  \"source\",\n  \"span\",\n  \"strong\",\n  \"style\",\n  \"sub\",\n  \"summary\",\n  \"sup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"textarea\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"time\",\n  \"title\",\n  \"tr\",\n  \"track\",\n  \"u\",\n  \"ul\",\n  \"var\",\n  \"video\",\n  \"wbr\",\n  // SVG\n  \"circle\",\n  \"clipPath\",\n  \"defs\",\n  \"ellipse\",\n  \"foreignObject\",\n  \"g\",\n  \"image\",\n  \"line\",\n  \"linearGradient\",\n  \"mask\",\n  \"path\",\n  \"pattern\",\n  \"polygon\",\n  \"polyline\",\n  \"radialGradient\",\n  \"rect\",\n  \"stop\",\n  \"svg\",\n  \"text\",\n  \"tspan\"\n];\n\n// src/index.ts\nexport * from \"@react-spring/core\";\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors\n});\nvar host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: (style) => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props\n});\nvar animated = host.animated;\nexport {\n  animated as a,\n  animated\n};\n", "export const roundedRect = (\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    radius: number\n) => {\n    if (radius > 0) {\n        ctx.moveTo(x + radius, y)\n        ctx.lineTo(x + width - radius, y)\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n        ctx.lineTo(x + width, y + height - radius)\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n        ctx.lineTo(x + radius, y + height)\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n        ctx.lineTo(x, y + radius)\n        ctx.quadraticCurveTo(x, y, x + radius, y)\n        ctx.closePath()\n    } else {\n        ctx.rect(x, y, width, height)\n    }\n}\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps, BarDatum } from './types'\n\nexport const BarAnnotations = <D extends BarDatum>({\n    bars,\n    annotations,\n}: BarAnnotationsProps<D>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <D extends BarDatum>({\n    bar: { data, ...bar },\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n    borderRadius,\n    borderWidth,\n    label,\n    shouldRenderLabel,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<D>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarTooltipProps } from './types'\n\nexport const BarTooltip = <D extends BarDatum>({ color, label, ...data }: BarTooltipProps<D>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n", "import { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport {\n    BarCommonProps,\n    BarDatum,\n    ComputedDatum,\n    BarSvgPropsWithDefaults,\n    BarCanvasPropsWithDefaults,\n} from './types'\nimport { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { renderBar } from './renderBar'\n\nexport const commonDefaultProps: Omit<BarCommonProps<BarDatum>, 'data' | 'theme'> = {\n    indexBy: 'id',\n    keys: ['value'],\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    valueScale: { type: 'linear', nice: true, round: false },\n    indexScale: { type: 'band', round: false },\n    padding: 0.1,\n    innerPadding: 0,\n    enableGridX: false,\n    enableGridY: true,\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { theme: 'labels.text.fill' },\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: (datum: ComputedDatum<BarDatum>) => `${datum.id} - ${datum.indexValue}`,\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps: Omit<\n    BarSvgPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    barComponent: BarItem,\n    defs: [],\n    fill: [],\n    markers: [],\n    animate: true,\n    animateOnMount: false,\n    motionConfig: 'default',\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps: Omit<\n    BarCanvasPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    renderBar,\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n", "import { roundedRect } from '@nivo/canvas'\nimport { drawCanvasText } from '@nivo/text'\nimport { BarDatum, RenderBarProps } from './types'\n\nexport const renderBar = <D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        bar: { color, height, width, x, y },\n        borderColor,\n        borderRadius,\n        borderWidth,\n        label,\n        shouldRenderLabel,\n        labelStyle,\n        labelX,\n        labelY,\n        textAnchor,\n    }: RenderBarProps<D>\n) => {\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n    ctx.fill()\n\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (shouldRenderLabel) {\n        ctx.textBaseline = 'middle'\n        ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n        drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n    }\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <D extends BarDatum>(\n    data: readonly D[],\n    getIndex: (datum: D) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <D extends BarDatum>(data: readonly D[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as D\n    )\n\nexport const filterNullValues = <D extends BarDatum>(data: D) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<D, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<D extends BarDatum>(\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    reverse: boolean,\n    labelPosition: BarCommonProps<D>['labelPosition'] = commonDefaultProps.labelPosition,\n    labelOffset: BarCommonProps<D>['labelOffset'] = commonDefaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    data: readonly D[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <D extends BarDatum>({\n    layout,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<D>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const clampMin = valueScale.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    // As we use extra inner padding between the bars, we need to adjust the bandwidth.\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<D, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<D>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<D extends BarDatum> = SeriesPoint<D>\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    stackedData: Series<D, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getY = (d: StackDatum<D>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<D>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getX = (d: StackDatum<D>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<D>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n    reverse: boolean\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n", "import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <D extends BarDatum>(\n    bars: ComputedBarDatum<D>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    groupMode: BarCommonProps<D>['groupMode'] = commonDefaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <D extends BarDatum>({\n    indexBy = commonDefaultProps.indexBy,\n    keys = commonDefaultProps.keys,\n    label = commonDefaultProps.label,\n    tooltipLabel = commonDefaultProps.tooltipLabel,\n    valueFormat,\n    colors = commonDefaultProps.colors,\n    colorBy = commonDefaultProps.colorBy,\n    borderColor = commonDefaultProps.borderColor,\n    labelTextColor = commonDefaultProps.labelTextColor,\n    groupMode = commonDefaultProps.groupMode,\n    layout = commonDefaultProps.layout,\n    data,\n    margin,\n    width,\n    height,\n    padding = commonDefaultProps.padding,\n    innerPadding = commonDefaultProps.innerPadding,\n    valueScale = commonDefaultProps.valueScale,\n    indexScale = commonDefaultProps.indexScale,\n    initialHiddenIds = commonDefaultProps.initialHiddenIds,\n    enableLabel = commonDefaultProps.enableLabel,\n    labelSkipWidth = commonDefaultProps.labelSkipWidth,\n    labelSkipHeight = commonDefaultProps.labelSkipHeight,\n    legends = commonDefaultProps.legends,\n    legendLabel,\n    totalsOffset = commonDefaultProps.totalsOffset,\n}: Partial<\n    Pick<\n        BarCommonProps<D>,\n        | 'indexBy'\n        | 'keys'\n        | 'label'\n        | 'tooltipLabel'\n        | 'valueFormat'\n        | 'colors'\n        | 'colorBy'\n        | 'borderColor'\n        | 'labelTextColor'\n        | 'groupMode'\n        | 'layout'\n        | 'padding'\n        | 'innerPadding'\n        | 'valueScale'\n        | 'indexScale'\n        | 'initialHiddenIds'\n        | 'enableLabel'\n        | 'labelSkipWidth'\n        | 'labelSkipHeight'\n        | 'legends'\n        | 'legendLabel'\n        | 'totalsOffset'\n    >\n> & {\n    width: number\n    height: number\n    margin: Margin\n    data: DataProps<D>['data']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<D>>(borderColor, theme)\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<D>>(labelTextColor, theme)\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        data,\n        getIndex,\n        keys,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter((bar): bar is ComputedBarDatumWithValue<D> => bar.data.value !== null)\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const reverse = valueScale.reverse ?? false\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n", "import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport {\n    BarComponent,\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayerId,\n    BarSvgProps,\n    BarTooltipComponent,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<D extends BarDatum> = Omit<\n    BarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as BarLayerId[],\n    barComponent = svgDefaultProps.barComponent as unknown as BarComponent<D>,\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n    markers = svgDefaultProps.markers,\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    annotations = svgDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n    initialHiddenIds,\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n    forwardedRef,\n}: InnerBarProps<D> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<D>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<D>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<D> = {\n        ...commonProps,\n        margin,\n        width,\n        height,\n        innerWidth,\n        innerHeight,\n        bars,\n        legendData: legendsWithData,\n        enableLabel,\n        xScale,\n        yScale,\n        tooltip,\n        getTooltipLabel,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        getColor,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = forwardRef(\n    <D extends BarDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: BarSvgProps<D>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerBar<D> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <D extends BarDatum>(props: WithChartRef<BarSvgProps<D>, SVGSVGElement>) => ReactElement\n", "import {\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    ReactElement,\n    Ref,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n    WithChartRef,\n    mergeRefs,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCanvasRenderer,\n    BarCommonProps,\n    BarDatum,\n    BarTooltipComponent,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\nconst findBarUnderCursor = <D extends BarDatum>(\n    nodes: ComputedBarDatum<D>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<D>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}\n\nconst InnerBarCanvas = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n    layers = canvasDefaultProps.layers as BarCanvasLayer<D>[],\n    renderBar = canvasDefaultProps.renderBar as unknown as BarCanvasRenderer<D>,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n    annotations = canvasDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    forwardedRef,\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<D>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<D> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container\n            isInteractive={isInteractive}\n            renderWrapper={renderWrapper}\n            theme={theme}\n            animate={false}\n        >\n            <InnerBarCanvas<RawDatum> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<BarCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { Bar } from './Bar'\nimport { BarDatum, ResponsiveBarSvgProps } from './types'\n\nexport const ResponsiveBar = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarSvgProps<D>, 'ref'>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => <Bar<D> {...props} width={width} height={height} ref={ref} />}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarSvgProps<D>) => ReactElement\n", "import { ForwardedRef, forwardRef, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { BarDatum, ResponsiveBarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\n\nexport const ResponsiveBarCanvas = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarCanvasProps<D>, 'ref'>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BarCanvas<D> {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarCanvasProps<D>) => ReactElement\n"],
  "mappings": "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",
  "names": ["n", "i", "z", "z2", "t", "roundedRect", "ctx", "x", "y", "width", "height", "radius", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "rect", "BarAnnotations", "_ref", "bars", "annotations", "boundAnnotations", "useAnnotations", "data", "getPosition", "bar", "x", "width", "y", "height", "getDimensions", "_ref2", "size", "Math", "max", "_jsx", "_Fragment", "children", "map", "annotation", "i", "Annotation", "_extends", "BarLegends", "legends", "toggleSerie", "_legend$data", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "dataFrom", "undefined", "BarItem", "_data$fill", "_ref$bar", "_objectWithoutPropertiesLoose", "_excluded", "_ref$style", "style", "borderColor", "color", "labelColor", "labelOpacity", "labelX", "labelY", "transform", "textAnchor", "borderRadius", "borderWidth", "label", "shouldRenderLabel", "isInteractive", "onClick", "onMouseEnter", "onMouseLeave", "tooltip", "isFocusable", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "ariaDisabled", "ariaHidden", "theme", "useTheme", "_useTooltip", "useTooltip", "showTooltipFromEvent", "showTooltipAt", "hideTooltip", "renderTooltip", "useMemo", "createElement", "handleClick", "useCallback", "event", "handleTooltip", "handleMouseEnter", "handleMouseLeave", "handleFocus", "absX", "absY", "handleBlur", "_jsxs", "animated", "g", "rect", "to", "value", "rx", "ry", "fill", "strokeWidth", "stroke", "focusable", "tabIndex", "onMouseMove", "onFocus", "onBlur", "id", "index", "Text", "dominantBaseline", "fillOpacity", "labels", "text", "pointerEvents", "BarTooltip", "BasicTooltip", "formattedValue", "enableChip", "commonDefaultProps", "indexBy", "keys", "groupMode", "layout", "valueScale", "type", "nice", "round", "indexScale", "padding", "innerPadding", "enableGridX", "enableGridY", "enableLabel", "labelPosition", "labelOffset", "labelSkipWidth", "labelSkipHeight", "labelTextColor", "colorBy", "colors", "scheme", "from", "tooltipLabel", "datum", "indexValue", "initialHiddenIds", "enableTotals", "totalsOffset", "svgDefaultProps", "layers", "axisTop", "axisRight", "axisBottom", "axisLeft", "barComponent", "defs", "markers", "animate", "animateOnMount", "motionConfig", "role", "canvasDefaultProps", "renderBar", "ctx", "labelStyle", "fillStyle", "strokeStyle", "lineWidth", "beginPath", "roundedRect", "min", "textBaseline", "textAlign", "drawCanvasText", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "getIndexScale", "getIndex", "axis", "computeScale", "all", "normalizeData", "item", "reduce", "acc", "key", "filterNullValues", "Object", "coerceValue", "Number", "useComputeLabelLayout", "reverse", "computedLabelOffset", "gt", "other", "lt", "range", "start", "end", "Array", "repeat", "_", "clampToZero", "generateVerticalGroupedBars", "barWidth", "yRef", "formatValue", "getColor", "getTooltipLabel", "_ref$innerPadding", "xScale", "yScale", "margin", "compare", "cleanedData", "forEach", "domain", "length", "_xScale", "d", "_yScale", "_coerceValue", "rawValue", "barHeight", "_yScale2", "barData", "hidden", "push", "left", "top", "generateHorizontalGroupedBars", "xRef", "_ref2$innerPadding", "_yScale3", "_xScale2", "_coerceValue2", "_xScale3", "generateGroupedBars", "_ref3", "_valueScale$reverse", "_scale", "_ref3$padding", "_ref3$innerPadding", "indexScaleConfig", "_ref3$hiddenIds", "hiddenIds", "props", "filter", "includes", "_ref4", "otherAxis", "clampMin", "values", "entry", "concat", "k", "Boolean", "apply", "isFinite", "scale", "_ref5", "bandwidth", "params", "flattenDeep", "arr", "some", "isArray", "generateVerticalStackedBars", "stackedData", "stackedDataItem", "_getY", "generateHorizontalStackedBars", "_getX", "generateStackedBars", "array", "_ref4$padding", "_ref4$hiddenIds", "stack", "offset", "stackOffsetDiverging", "num", "_ref6", "getLegendData", "direction", "legendLabel", "getLegendLabel", "getPropertyAccessor", "uniqBy", "_bar$data$indexValue", "_bar$color2", "_bar$color", "updateTotalsByIndex", "totalsByIndex", "currentIndexValue", "get", "set", "updateTotalsPositivesByIndex", "totalsPositivesByIndex", "updateGreatestValueByIndex", "greatestValueByIndex", "currentGreatestValue", "updateNumberOfBarsByIndex", "numberOfBarsByIndex", "currentNumberOfBars", "useBar", "_ref$indexBy", "_ref$keys", "_ref$label", "_ref$tooltipLabel", "valueFormat", "_ref$colors", "_ref$colorBy", "_ref$borderColor", "_ref$labelTextColor", "_ref$groupMode", "_ref$layout", "_ref$padding", "_ref$valueScale", "_ref$indexScale", "_ref$initialHiddenIds", "_ref$enableLabel", "_ref$labelSkipWidth", "_ref$labelSkipHeight", "_ref$legends", "_ref$totalsOffset", "_useState", "useState", "setHiddenIds", "state", "indexOf", "usePropertyAccessor", "getLabel", "useValueFormatter", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getLabelColor", "_generateBars", "barsWithValue", "shouldRenderBarLabel", "legendData", "find", "legendsWithData", "barTotals", "totals", "Map", "_bar$data", "totalsPositive", "xPosition", "yPosition", "animationOffset", "indexTotal", "_bar$data2", "greatestValue", "numberOfBars", "BarTotals", "springConfig", "useTransition", "barTotal", "enter", "update", "leave", "config", "immediate", "initial", "fontWeight", "fontSize", "fontFamily", "alignmentBaseline", "InnerBar", "partialMargin", "_ref$axisBottom", "_ref$axisLeft", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "_ref$layers", "_ref$barComponent", "_ref$labelPosition", "_ref$labelOffset", "_ref$markers", "_ref$defs", "_ref$fill", "_ref$borderRadius", "_ref$borderWidth", "_ref$annotations", "_ref$isInteractive", "_ref$tooltip", "_ref$role", "_ref$isFocusable", "barAriaLabel", "barAriaLabelledBy", "barAriaDescribedBy", "barAriaHidden", "barAriaDisabled", "_ref$enableTotals", "forwardedRef", "_useMotionConfig", "useMotionConfig", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "_useBar", "computeLabelLayout", "transition", "commonProps", "boundDefs", "bindDefs", "dataKey", "targetKey", "layerById", "axes", "grid", "Axes", "right", "bottom", "Fragment", "Grid", "xValues", "yValues", "CartesianMarkers", "layerContext", "SvgWrapper", "ref", "layer", "_layerById$layer", "Bar", "forwardRef", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "Container", "findBarUnderCursor", "nodes", "node", "isCursorInRect", "InnerBarCanvas", "_ref$renderBar", "_ref$pixelRatio", "canvasEl", "useRef", "useComputedAnnotations", "useEffect", "current", "getContext", "background", "fillRect", "translate", "line", "renderGridLinesToCanvas", "renderAxesToCanvas", "setCanvasFont", "renderLegendToCanvas", "renderAnnotationsToCanvas", "save", "handleMouseHover", "_getRelativeCursor", "getRelativeCursor", "_getRelativeCursor2", "_getRelativeCursor3", "mergeRefs", "cursor", "BarCanvas", "ResponsiveBar", "defaultWidth", "defaultHeight", "onResize", "debounceResize", "ResponsiveWrapper", "Ye", "ResponsiveBarCanvas"]
}
