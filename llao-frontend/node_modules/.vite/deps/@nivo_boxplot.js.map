{
  "version": 3,
  "sources": ["../../@nivo/boxplot/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs", "../../@nivo/boxplot/src/BoxPlotAnnotations.tsx", "../../@nivo/boxplot/src/BoxPlotLegends.tsx", "../../@nivo/boxplot/src/BoxPlotItem.tsx", "../../@nivo/boxplot/src/BoxPlotTooltip.tsx", "../../@nivo/boxplot/src/props.ts", "../../@nivo/boxplot/src/compute/generation.ts", "../../@nivo/boxplot/src/compute/common.ts", "../../@nivo/boxplot/src/compute/stratification.ts", "../../@nivo/boxplot/src/hooks.ts", "../../@nivo/boxplot/src/compute/legends.ts", "../../@nivo/boxplot/src/BoxPlot.tsx", "../../@nivo/boxplot/src/ResponsiveBoxPlot.tsx"],
  "sourcesContent": ["// src/index.ts\nimport { Globals } from \"@react-spring/core\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport { createStringInterpolator, colors } from \"@react-spring/shared\";\nimport { createHost } from \"@react-spring/animated\";\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n  if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n  if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))\n    return value + \"px\";\n  return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false;\n  }\n  const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props;\n  const values = Object.values(attributes);\n  const names = Object.keys(attributes).map(\n    (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(\n      /([A-Z])/g,\n      // Attributes are written in dash case\n      (n) => \"-\" + n.toLowerCase()\n    ))\n  );\n  if (children !== void 0) {\n    instance.textContent = children;\n  }\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name]);\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value);\n      } else {\n        instance.style[name] = value;\n      }\n    }\n  }\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i]);\n  });\n  if (className !== void 0) {\n    instance.className = className;\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop;\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft;\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute(\"viewBox\", viewBox);\n  }\n}\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\nvar prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\"Webkit\", \"Ms\", \"Moz\", \"O\"];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach((prefix) => acc[prefixKey(prefix, prop)] = acc[prop]);\n  return acc;\n}, isUnitlessNumber);\n\n// src/AnimatedStyle.ts\nimport { AnimatedObject } from \"@react-spring/animated\";\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver\n} from \"@react-spring/shared\";\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends AnimatedObject {\n  constructor({ x, y, z, ...style }) {\n    const inputs = [];\n    const transforms = [];\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0]);\n      transforms.push((xyz) => [\n        `translate3d(${xyz.map((v) => addUnit(v, \"px\")).join(\",\")})`,\n        // prettier-ignore\n        isValueIdentity(xyz, 0)\n      ]);\n    }\n    eachProp(style, (value, key) => {\n      if (key === \"transform\") {\n        inputs.push([value || \"\"]);\n        transforms.push((transform) => [transform, transform === \"\"]);\n      } else if (domTransforms.test(key)) {\n        delete style[key];\n        if (is.und(value)) return;\n        const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n        inputs.push(toArray(value));\n        transforms.push(\n          key === \"rotate3d\" ? ([x2, y2, z2, deg]) => [\n            `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`,\n            isValueIdentity(deg, 0)\n          ] : (input) => [\n            `${key}(${input.map((v) => addUnit(v, unit)).join(\",\")})`,\n            isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n          ]\n        );\n      }\n    });\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms);\n    }\n    super(style);\n  }\n};\nvar FluidTransform = class extends FluidValue {\n  constructor(inputs, transforms) {\n    super();\n    this.inputs = inputs;\n    this.transforms = transforms;\n    this._value = null;\n  }\n  get() {\n    return this._value || (this._value = this._get());\n  }\n  _get() {\n    let transform = \"\";\n    let identity = true;\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0]);\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      );\n      transform += \" \" + t;\n      identity = identity && id;\n    });\n    return identity ? \"none\" : transform;\n  }\n  // Start observing our inputs once we have an observer.\n  observerAdded(count) {\n    if (count == 1)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      );\n  }\n  // Stop observing our inputs once we have no observers.\n  observerRemoved(count) {\n    if (count == 0)\n      each(\n        this.inputs,\n        (input) => each(\n          input,\n          (value) => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      );\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._value = null;\n    }\n    callFluidObservers(this, event);\n  }\n};\n\n// src/primitives.ts\nvar primitives = [\n  \"a\",\n  \"abbr\",\n  \"address\",\n  \"area\",\n  \"article\",\n  \"aside\",\n  \"audio\",\n  \"b\",\n  \"base\",\n  \"bdi\",\n  \"bdo\",\n  \"big\",\n  \"blockquote\",\n  \"body\",\n  \"br\",\n  \"button\",\n  \"canvas\",\n  \"caption\",\n  \"cite\",\n  \"code\",\n  \"col\",\n  \"colgroup\",\n  \"data\",\n  \"datalist\",\n  \"dd\",\n  \"del\",\n  \"details\",\n  \"dfn\",\n  \"dialog\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"em\",\n  \"embed\",\n  \"fieldset\",\n  \"figcaption\",\n  \"figure\",\n  \"footer\",\n  \"form\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"head\",\n  \"header\",\n  \"hgroup\",\n  \"hr\",\n  \"html\",\n  \"i\",\n  \"iframe\",\n  \"img\",\n  \"input\",\n  \"ins\",\n  \"kbd\",\n  \"keygen\",\n  \"label\",\n  \"legend\",\n  \"li\",\n  \"link\",\n  \"main\",\n  \"map\",\n  \"mark\",\n  \"menu\",\n  \"menuitem\",\n  \"meta\",\n  \"meter\",\n  \"nav\",\n  \"noscript\",\n  \"object\",\n  \"ol\",\n  \"optgroup\",\n  \"option\",\n  \"output\",\n  \"p\",\n  \"param\",\n  \"picture\",\n  \"pre\",\n  \"progress\",\n  \"q\",\n  \"rp\",\n  \"rt\",\n  \"ruby\",\n  \"s\",\n  \"samp\",\n  \"script\",\n  \"section\",\n  \"select\",\n  \"small\",\n  \"source\",\n  \"span\",\n  \"strong\",\n  \"style\",\n  \"sub\",\n  \"summary\",\n  \"sup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"textarea\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"time\",\n  \"title\",\n  \"tr\",\n  \"track\",\n  \"u\",\n  \"ul\",\n  \"var\",\n  \"video\",\n  \"wbr\",\n  // SVG\n  \"circle\",\n  \"clipPath\",\n  \"defs\",\n  \"ellipse\",\n  \"foreignObject\",\n  \"g\",\n  \"image\",\n  \"line\",\n  \"linearGradient\",\n  \"mask\",\n  \"path\",\n  \"pattern\",\n  \"polygon\",\n  \"polyline\",\n  \"radialGradient\",\n  \"rect\",\n  \"stop\",\n  \"svg\",\n  \"text\",\n  \"tspan\"\n];\n\n// src/index.ts\nexport * from \"@react-spring/core\";\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors\n});\nvar host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: (style) => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props\n});\nvar animated = host.animated;\nexport {\n  animated as a,\n  animated\n};\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BoxPlotAnnotationsProps, ComputedBoxPlotSummary } from './types'\n\nconst getPosition = (boxPlot: ComputedBoxPlotSummary) => ({\n    x: boxPlot.x + boxPlot.width / 2,\n    y: boxPlot.y + boxPlot.height / 2,\n})\n\nconst getDimensions = ({ width, height }: { width: number; height: number }) => ({\n    width,\n    height,\n    size: Math.max(width, height),\n})\n\nexport const BoxPlotAnnotations = ({ boxPlots, annotations }: BoxPlotAnnotationsProps) => {\n    const boundAnnotations = useAnnotations({\n        data: boxPlots,\n        annotations,\n        getPosition,\n        getDimensions,\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg, LegendProps } from '@nivo/legends'\nimport { LegendData } from './types'\n\ninterface BoxPlotLegendsProps {\n    width: number\n    height: number\n    legends: [LegendProps, LegendData[]][]\n}\n\nexport const BoxPlotLegends = ({ width, height, legends }: BoxPlotLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => {\n            // Advanced feature:\n            // Allow a legend spec to carry its own custom content via 'legend.data'\n            // Or fallback on content provided via 'data'\n            return (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                />\n            )\n        })}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, SpringValue } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BoxPlotDatum, BoxPlotItemProps } from './types'\n\nconst BoxPlotItemWhisker = ({\n    distStart,\n    distEnd,\n    whiskerEndSize,\n    whiskerColor,\n    whiskerWidth,\n}: {\n    distStart: SpringValue<number>\n    distEnd: SpringValue<number>\n    whiskerEndSize: number\n    whiskerColor: SpringValue<string>\n    whiskerWidth: number\n}) => {\n    return (\n        <>\n            <animated.line\n                x1={0}\n                x2={0}\n                y1={distStart}\n                y2={distEnd}\n                strokeWidth={whiskerWidth}\n                stroke={whiskerColor}\n            />\n            {whiskerEndSize > 0 ? (\n                <animated.line\n                    x1={-whiskerEndSize}\n                    x2={whiskerEndSize}\n                    y1={distEnd}\n                    y2={distEnd}\n                    strokeWidth={whiskerWidth}\n                    stroke={whiskerColor}\n                />\n            ) : null}\n        </>\n    )\n}\n\nexport const BoxPlotItem = <RawDatum extends BoxPlotDatum>({\n    boxPlot,\n    layout,\n    animatedProps: {\n        borderColor,\n        medianColor,\n        whiskerColor,\n        color,\n        opacity,\n        transform,\n        valueInterval,\n        valueDistance0,\n        valueDistance1,\n        valueDistance3,\n        valueDistance4,\n    },\n    borderRadius,\n    borderWidth,\n    medianWidth,\n    whiskerWidth,\n    whiskerEndSize,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    setActiveItem,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BoxPlotItemProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const vertical = layout === 'vertical'\n    const bandwidth = vertical ? boxPlot.width : boxPlot.height\n\n    const renderTooltip = useMemo(() => () => createElement(tooltip, boxPlot), [tooltip, boxPlot])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(boxPlot, event)\n        },\n        [boxPlot, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(boxPlot, event)\n            showTooltipFromEvent(renderTooltip(), event)\n            setActiveItem(boxPlot)\n        },\n        [boxPlot, onMouseEnter, showTooltipFromEvent, renderTooltip, setActiveItem]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(boxPlot, event)\n            hideTooltip()\n            setActiveItem(null)\n        },\n        [boxPlot, hideTooltip, onMouseLeave, setActiveItem]\n    )\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g\n            data-key={`boxplot.${boxPlot.key}`}\n            transform={transform}\n            opacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleTooltip : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            focusable={isFocusable}\n            tabIndex={isFocusable ? 0 : undefined}\n            aria-label={ariaLabel ? ariaLabel(boxPlot) : undefined}\n            aria-labelledby={ariaLabelledBy ? ariaLabelledBy(boxPlot) : undefined}\n            aria-describedby={ariaDescribedBy ? ariaDescribedBy(boxPlot) : undefined}\n        >\n            <animated.rect\n                x={-bandwidth / 2}\n                y={vertical ? valueDistance3 : valueDistance1}\n                width={bandwidth}\n                height={valueInterval}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={boxPlot.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n            />\n            <animated.line\n                x1={-bandwidth / 2}\n                x2={bandwidth / 2}\n                y1={0}\n                y2={0}\n                strokeWidth={medianWidth}\n                stroke={medianColor}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance1}\n                distEnd={valueDistance0}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance3}\n                distEnd={valueDistance4}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n        </animated.g>\n    )\n}\n", "import { memo } from 'react'\nimport { Chip } from '@nivo/tooltip'\nimport { useTheme, Theme } from '@nivo/theming'\nimport { BoxPlotSummaryFormatted, BoxPlotTooltipProps, BoxPlotSummary } from './types'\n\ninterface BoxPlotSummaryTooltipProps {\n    label: string\n    formatted: BoxPlotSummaryFormatted\n    color?: string\n    enableChip?: boolean\n}\n\ntype Translation = Record<string, number | string>\n\nexport const defaultTranslation = {\n    n: 'n',\n    mean: 'mean',\n    min: 'min',\n    max: 'max',\n    Summary: 'Summary',\n    Quantiles: 'Quantiles',\n}\n\ntype ExtendedTheme = Theme & {\n    translation: Translation\n}\n\nconst hasTranslation = (theme: Theme | ExtendedTheme): theme is ExtendedTheme => {\n    return 'translation' in theme\n}\n\nexport const BoxPlotSummaryTooltip = memo<BoxPlotSummaryTooltipProps>(\n    ({ label, formatted, enableChip = false, color }) => {\n        const theme = useTheme()\n        let translation = defaultTranslation\n        if (hasTranslation(theme)) {\n            translation = {\n                ...defaultTranslation,\n                ...theme.translation,\n            }\n        }\n\n        const quantiles = formatted.quantiles.map((q, i) => (\n            <div key={'quantile.' + i}>\n                {q}%: <strong>{formatted.values[i]}</strong>\n            </div>\n        ))\n        return (\n            <div style={theme.tooltip.container}>\n                <div style={theme.tooltip.basic}>\n                    {enableChip && <Chip color={color ?? ''} style={theme.tooltip.chip} />}\n                    {label}\n                </div>\n                <div style={{ display: 'flex', marginTop: '1rem' }}>\n                    <div style={{ marginRight: '2rem' }}>\n                        <div>\n                            {translation.n}: <strong>{formatted.n}</strong>\n                        </div>\n                        <div style={{ marginTop: '1rem' }}>{translation.Summary}</div>\n                        <div>\n                            {translation.mean}: <strong>{formatted.mean}</strong>\n                        </div>\n                        <div>\n                            {translation.min}: <strong>{formatted.extrema[0]}</strong>\n                        </div>\n                        <div>\n                            {translation.max}: <strong>{formatted.extrema[1]}</strong>\n                        </div>\n                    </div>\n                    <div>\n                        <div>{translation.Quantiles}</div>\n                        {quantiles}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n)\n\nexport const BoxPlotTooltip = ({ color, label, formatted }: BoxPlotTooltipProps) => {\n    return (\n        <BoxPlotSummaryTooltip\n            label={label}\n            formatted={formatted}\n            enableChip={true}\n            color={color}\n        />\n    )\n}\n\nexport const BoxPlotTooltipLabel = (datum: BoxPlotSummary) => {\n    if (datum.subGroup) {\n        return datum.group + ' - ' + datum.subGroup\n    }\n    return datum.group\n}\n", "import { BoxPlotItem } from './BoxPlotItem'\nimport { BoxPlotTooltip, BoxPlotTooltipLabel } from './BoxPlotTooltip'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleLinearSpec } from '@nivo/scales'\nimport { ComputedBoxPlotSummary } from './types'\n\nexport const defaultProps = {\n    value: 'value',\n    groupBy: 'group',\n    groups: null,\n    subGroupBy: null,\n    subGroups: null,\n\n    quantiles: [0.1, 0.25, 0.5, 0.75, 0.9],\n\n    layout: 'vertical' as const,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleLinearSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 6,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.25,\n\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    valueFormat: (value: number) => value.toPrecision(4),\n\n    colorBy: 'subGroup' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    medianWidth: 2,\n    medianColor: {\n        from: 'color',\n        modifiers: [['darker', 2.0]],\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    whiskerWidth: 2,\n    whiskerColor: {\n        from: 'color',\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n    whiskerEndSize: 0.6,\n\n    isInteractive: true,\n    tooltip: BoxPlotTooltip,\n    tooltipLabel: BoxPlotTooltipLabel,\n\n    legends: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'boxPlots', 'markers', 'legends', 'annotations'],\n    boxPlotComponent: BoxPlotItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n", "import {\n    Scale,\n    ScaleBand,\n    computeScale,\n    ScaleBandSpec,\n    ScaleLinearSpec,\n    ScaleLogSpec,\n    ScaleSymlogSpec,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { BoxPlotSummary, ComputedBoxPlotSummary } from '../types'\nimport { getIndexScale } from './common'\n\ntype Params = {\n    data: BoxPlotSummary[]\n    formatValue: (value: number) => string\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n    innerPadding: number\n    groups: string[]\n    subGroups: string[]\n    indexScale: ScaleBand<string>\n    valueScale: Scale<number, number>\n    bandwidth: number\n    layout: 'vertical' | 'horizontal'\n}\n\nconst generateComputedBoxPlotSummaries = ({\n    data,\n    getTooltipLabel,\n    innerPadding = 0,\n    groups,\n    indexScale,\n    valueScale,\n    formatValue,\n    bandwidth,\n    layout,\n}: Params): ComputedBoxPlotSummary[] => {\n    if (bandwidth === 0) {\n        return Array<ComputedBoxPlotSummary>()\n    }\n    const vertical = layout === 'vertical'\n    return data.map(datum => {\n        const { group, subGroup, groupIndex, subGroupIndex, values } = datum\n        const indexCoordinate =\n            (indexScale(groups[groupIndex]) ?? 0) +\n            bandwidth * subGroupIndex +\n            innerPadding * subGroupIndex\n        const key = `${groupIndex}.${subGroupIndex}`\n        const coords = values.map(valueScale).map(v => v ?? 0)\n        const intervals = [0, 1, 2, 3].map(i => Math.abs(coords[i + 1] - coords[i]) ?? 0)\n        // top-left of rectangle and width/height depend on the layout\n        // (this conditional inside the loop is not ideal, but typical loops will be short)\n        const position = vertical\n            ? {\n                  x: indexCoordinate,\n                  y: valueScale(datum.values[3]) ?? 0,\n                  width: bandwidth,\n                  height: intervals[1] + intervals[2],\n              }\n            : {\n                  x: valueScale(datum.values[1]) ?? 0,\n                  y: indexCoordinate,\n                  width: intervals[1] + intervals[2],\n                  height: bandwidth,\n              }\n        return {\n            key,\n            group,\n            subGroup,\n            data: datum,\n            formatted: {\n                n: String(datum.n),\n                mean: formatValue(datum.mean),\n                extrema: datum.extrema.map(formatValue),\n                values: datum.values.map(formatValue),\n                quantiles: datum.quantiles.map(v => String(100 * v)),\n            },\n            ...position,\n            coordinates: {\n                index: indexCoordinate,\n                values: values.map(v => valueScale(v) ?? 0),\n            },\n            bandwidth,\n            label: getTooltipLabel(datum),\n            layout,\n        } as ComputedBoxPlotSummary\n    })\n}\n\nexport const generateBoxPlots = ({\n    data,\n    layout,\n    groups,\n    subGroups,\n    formatValue,\n    minValue,\n    maxValue,\n    width,\n    height,\n    padding,\n    innerPadding,\n    valueScale: valueScaleConfig,\n    indexScale: indexScaleConfig,\n    getTooltipLabel,\n}: {\n    data: BoxPlotSummary[]\n    layout: string\n    groups: string[] | null\n    subGroups: string[] | null\n    formatValue: (value: number) => string\n    minValue: 'auto' | number\n    maxValue: 'auto' | number\n    width: number\n    height: number\n    padding: number\n    innerPadding: number\n    valueScale: ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec\n    indexScale: ScaleBandSpec\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n}) => {\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(groups ?? [], padding, indexScaleConfig, size, otherAxis)\n\n    const valueScaleSpec = {\n        max: maxValue,\n        min: minValue,\n        ...valueScaleConfig,\n    }\n\n    const values = data.map((datum: BoxPlotSummary) => datum.values).flat()\n    const min = values.reduce((acc: number, value: number) => Math.min(acc, value), Infinity)\n    const max = values.reduce((acc: number, value: number) => Math.max(acc, value), -Infinity)\n\n    const valueScale = computeScale(\n        valueScaleSpec as ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec,\n        { all: [min, max], min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] =\n        layout === 'vertical' ? [indexScale, valueScale] : [valueScale, indexScale]\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (nSubGroups - 1)) / nSubGroups\n\n    const params = {\n        data,\n        groups,\n        subGroups,\n        getTooltipLabel,\n        innerPadding,\n        indexScale,\n        valueScale,\n        formatValue,\n        bandwidth,\n        layout,\n    } as Params\n    const boxPlots = generateComputedBoxPlotSummaries(params)\n\n    return { xScale, yScale, boxPlots }\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = (\n    groups: string[],\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(indexScale, { all: groups, min: 0, max: 0 }, size, axis) as ScaleBand<string>\n    ).padding(padding)\n}\n", "import { BoxPlotDatum, BoxPlotCommonProps, BoxPlotSummary } from '../types'\nimport { defaultProps } from '../props'\n\n/** stratify an array of raw data objects into an array of arrays;\n * each array will create one box plot */\nexport const stratifyData = <RawDatum extends BoxPlotDatum>({\n    data,\n    groups = defaultProps.groups,\n    getGroup,\n    subGroups = defaultProps.subGroups,\n    getSubGroup,\n}: {\n    data: RawDatum[]\n    groups?: BoxPlotCommonProps<RawDatum>['groups']\n    getGroup: ((datum: RawDatum) => string) | null\n    subGroups?: BoxPlotCommonProps<RawDatum>['subGroups']\n    getSubGroup: ((datum: RawDatum) => string) | null\n}) => {\n    const groupsMap = {} as BoxPlotDatum\n    if (groups) {\n        groups.map((g, i) => (groupsMap[g] = i))\n    }\n    const subGroupsMap = {} as BoxPlotDatum\n    if (subGroups) {\n        subGroups.map((sg, i) => (subGroupsMap[sg] = i))\n    }\n\n    const nGroups = Math.max(1, groups ? groups.length : 1)\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const n = nGroups * nSubGroups\n    const result = Array(n)\n        .fill([])\n        .map(() => Array<RawDatum>())\n    data.forEach((d: RawDatum) => {\n        const groupIndex = getGroup ? Number(groupsMap[getGroup(d)]) : 0\n        const subGroupIndex = getSubGroup ? Number(subGroupsMap[getSubGroup(d)] ?? 0) : 0\n        const index = groupIndex * nSubGroups + subGroupIndex\n        if (index >= 0) {\n            result[index].push(d)\n        }\n    })\n    return result\n}\n\nconst getQuantile = (values: number[], quantile = 0.5) => {\n    const realIndex = (values.length - 1) * Math.max(0, Math.min(1, quantile))\n    const intIndex = Math.floor(realIndex)\n    if (realIndex === intIndex) return values[intIndex]\n    const v1 = values[intIndex],\n        v2 = values[intIndex + 1]\n    return v1 + (v2 - v1) * (realIndex - intIndex)\n}\n\nconst getMean = (values: number[]) => {\n    const sum = values.reduce((acc, x) => acc + x, 0)\n    return sum / values.length\n}\n\nconst isPrecomputedDistribution = <RawDatum>(\n    datum: RawDatum | Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'>\n): datum is Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'> => {\n    const preComputedKeys = ['values', 'extrema', 'mean', 'quantiles', 'group', 'subGroup', 'n']\n    return preComputedKeys.every(k => k in (datum as object))\n}\n\nexport const summarizeDistribution = <RawDatum extends BoxPlotDatum>({\n    data,\n    getValue,\n    groups,\n    subGroups,\n    groupIndex,\n    subGroupIndex,\n    quantiles,\n}: {\n    data: RawDatum[]\n    getValue: (datum: RawDatum) => unknown\n    groups: string[] | null\n    subGroups: string[] | null\n    groupIndex: number\n    subGroupIndex: number\n    quantiles: number[]\n}) => {\n    // accept a precomputed summary representation if it has all the required keys\n    if (data.length === 1 && isPrecomputedDistribution(data[0])) {\n        return {\n            groupIndex: groupIndex,\n            subGroupIndex: subGroupIndex,\n            ...data[0],\n        } as BoxPlotSummary\n    }\n    // compute the summary representation from raw data using quantiles\n    const values = data.map(v => Number(getValue(v))) as number[]\n    values.sort((a, b) => a - b)\n    return {\n        group: groups ? groups[groupIndex] : '',\n        groupIndex: groupIndex,\n        subGroup: subGroups ? subGroups[subGroupIndex] : '',\n        subGroupIndex: subGroupIndex,\n        n: values.length,\n        extrema: [values[0], values[values.length - 1]],\n        quantiles: quantiles,\n        values: quantiles.map(q => getQuantile(values, q)),\n        mean: getMean(values),\n    } as BoxPlotSummary\n}\n", "import { useMemo, useState } from 'react'\nimport { SpringConfig, useTransition } from '@react-spring/web'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { PropertyAccessor, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    BoxPlotCommonProps,\n    BoxPlotDatum,\n    BoxPlotItemProps,\n    BoxPlotSummary,\n    ComputedBoxPlotSummary,\n    DataProps,\n    LegendData,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateBoxPlots, getLegendData, stratifyData, summarizeDistribution } from './compute'\nimport { LegendProps } from '@nivo/legends'\n\nexport const useLevels = <RawDatum extends BoxPlotDatum>(\n    levels: string[] | null,\n    data: RawDatum[],\n    by: PropertyAccessor<RawDatum, string> | null\n) => {\n    const getLevel = usePropertyAccessor(by ?? 'id')\n    if (levels) return levels\n    if (!by) return null\n    const result = new Set(data.map((d: RawDatum) => getLevel(d)))\n    return Array.from(result)\n}\n\nexport const useBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value,\n    groupBy,\n    groups = defaultProps.groups,\n    subGroupBy = defaultProps.subGroupBy,\n    subGroups = defaultProps.subGroups,\n    quantiles = defaultProps.quantiles,\n    width,\n    height,\n    layout,\n    minValue,\n    maxValue,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    colorBy = defaultProps.colorBy,\n    colors = defaultProps.colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    medianColor,\n    whiskerColor,\n    legendLabel,\n    tooltipLabel,\n    valueFormat = defaultProps.valueFormat,\n    legends = defaultProps.legends,\n}: {\n    data: DataProps<RawDatum>['data']\n    width: number\n    height: number\n} & Pick<\n    BoxPlotCommonProps<RawDatum>,\n    | 'value'\n    | 'groupBy'\n    | 'groups'\n    | 'subGroupBy'\n    | 'subGroups'\n    | 'quantiles'\n    | 'layout'\n    | 'minValue'\n    | 'maxValue'\n    | 'valueScale'\n    | 'indexScale'\n    | 'padding'\n    | 'innerPadding'\n    | 'colorBy'\n    | 'colors'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'medianColor'\n    | 'whiskerColor'\n    | 'legendLabel'\n    | 'tooltipLabel'\n    | 'valueFormat'\n    | 'legends'\n>) => {\n    // ensure that groups and subGroups are defined\n    groups = useLevels(groups, data, groupBy)\n    subGroups = useLevels(subGroups, data, subGroupBy)\n    const getGroup = usePropertyAccessor(groupBy ?? 'group')\n    const getSubGroup = usePropertyAccessor(subGroupBy ?? 'subGroup')\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    // trigger color fetch for all groups and subgroups\n    if (groups && colorBy === 'group') {\n        groups.map(group => getColor({ group } as BoxPlotSummary))\n    }\n    if (subGroups && colorBy === 'subGroup') {\n        subGroups.map(subGroup => getColor({ subGroup } as BoxPlotSummary))\n    }\n\n    const getBorderColor = useInheritedColor<ComputedBoxPlotSummary>(borderColor, theme)\n    const getMedianColor = useInheritedColor<ComputedBoxPlotSummary>(medianColor, theme)\n    const getWhiskerColor = useInheritedColor<ComputedBoxPlotSummary>(whiskerColor, theme)\n\n    // stratify long array with individual data points into arrays that will\n    // feed boxplot representations\n    const dataStratified = stratifyData({\n        data,\n        groups,\n        getGroup,\n        subGroups,\n        getSubGroup,\n    })\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const dataSummary = useMemo(\n        () =>\n            dataStratified.map((stratum: RawDatum[], index) =>\n                summarizeDistribution({\n                    data: stratum,\n                    getValue,\n                    groups,\n                    subGroups,\n                    groupIndex: Math.floor(index / nSubGroups),\n                    subGroupIndex: index % nSubGroups,\n                    quantiles,\n                })\n            ),\n        [dataStratified, getValue, groups, subGroups, nSubGroups, quantiles]\n    )\n\n    const {\n        boxPlots: unStyledBoxPlots,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            generateBoxPlots({\n                layout,\n                data: dataSummary.filter(stratum => stratum.n > 0),\n                groups,\n                subGroups,\n                formatValue,\n                minValue,\n                maxValue,\n                width,\n                height,\n                padding,\n                innerPadding,\n                valueScale,\n                indexScale,\n                getTooltipLabel,\n            }),\n        [\n            layout,\n            dataSummary,\n            groups,\n            subGroups,\n            formatValue,\n            minValue,\n            maxValue,\n            width,\n            height,\n            padding,\n            innerPadding,\n            valueScale,\n            indexScale,\n            getTooltipLabel,\n        ]\n    )\n\n    const [activeItem, setActiveItem] = useState<ComputedBoxPlotSummary | null>(null)\n    const activeKeys = useMemo(() => {\n        if (!activeItem) return []\n        const activeGroup = activeItem.group\n        const activeSubGroup = activeItem.subGroup\n        return unStyledBoxPlots\n            .filter(boxPlot => activeGroup === boxPlot.group || activeSubGroup === boxPlot.subGroup)\n            .map(boxPlot => boxPlot.key)\n    }, [unStyledBoxPlots, activeItem])\n\n    const boxPlots: ComputedBoxPlotSummary[] = useMemo(\n        () =>\n            unStyledBoxPlots.map(boxPlot => {\n                let computedOpacity = activeKeys.includes(boxPlot.key)\n                    ? activeOpacity\n                    : inactiveOpacity\n                if (!activeItem) {\n                    computedOpacity = opacity\n                }\n                return {\n                    ...boxPlot,\n                    color: getColor(boxPlot.data),\n                    opacity: computedOpacity,\n                }\n            }),\n        [\n            unStyledBoxPlots,\n            activeItem,\n            activeKeys,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            getColor,\n        ]\n    )\n\n    const legendsData: [LegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    boxPlots,\n                    dataFrom: colorBy,\n                    legendLabel,\n                })\n                return [legend, data]\n            }),\n        [legends, boxPlots, colorBy, legendLabel]\n    )\n\n    return {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    }\n}\n\nexport const useBoxPlotTransition = ({\n    boxPlots,\n    getBorderColor,\n    getMedianColor,\n    getWhiskerColor,\n    animate,\n    springConfig,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    getBorderColor: (d: ComputedBoxPlotSummary) => string\n    getMedianColor: (d: ComputedBoxPlotSummary) => string\n    getWhiskerColor: (d: ComputedBoxPlotSummary) => string\n    animate: boolean\n    springConfig: SpringConfig\n}) => {\n    const getTransitionProps = (boxPlot: ComputedBoxPlotSummary) => ({\n        borderColor: getBorderColor(boxPlot) as string,\n        medianColor: getMedianColor(boxPlot) as string,\n        whiskerColor: getWhiskerColor(boxPlot) as string,\n        color: boxPlot.color,\n        opacity: boxPlot.opacity,\n        valueInterval: Math.abs(boxPlot.coordinates.values[3] - boxPlot.coordinates.values[1]),\n        valueDistance0: boxPlot.coordinates.values[0] - boxPlot.coordinates.values[2],\n        valueDistance1: boxPlot.coordinates.values[1] - boxPlot.coordinates.values[2],\n        valueDistance3: boxPlot.coordinates.values[3] - boxPlot.coordinates.values[2],\n        valueDistance4: boxPlot.coordinates.values[4] - boxPlot.coordinates.values[2],\n        // translate to the midpoint of the median line\n        transform:\n            boxPlot.layout === 'vertical'\n                ? `translate(${boxPlot.x + boxPlot.width / 2}, ${boxPlot.coordinates.values[2]})`\n                : `translate(${boxPlot.coordinates.values[2]}, ${\n                      boxPlot.y + boxPlot.height / 2\n                  }) rotate(-90)`,\n    })\n\n    return useTransition<ComputedBoxPlotSummary, BoxPlotItemProps<BoxPlotDatum>['animatedProps']>(\n        boxPlots,\n        {\n            keys: boxPlot => boxPlot.key,\n            initial: animate ? undefined : null, // required for ssr\n            from: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            enter: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            update: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            leave: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n}\n", "import { BoxPlotDatum, BoxPlotCommonProps, ComputedBoxPlotSummary, LegendData } from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\nimport sortBy from 'lodash/sortBy.js'\n\nexport const getLegendData = <RawDatum extends BoxPlotDatum>({\n    boxPlots,\n    dataFrom,\n    legendLabel,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    dataFrom: BoxPlotCommonProps<RawDatum>['colorBy']\n    legendLabel: BoxPlotCommonProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(legendLabel ?? dataFrom)\n    const byGroup = dataFrom === 'group'\n    const legendData = boxPlots.map(\n        boxPlot =>\n            // id & label are redundant below, but needed for ts in @nivo/legends\n            ({\n                id: byGroup ? boxPlot.data.groupIndex : boxPlot.data.subGroupIndex,\n                label: getLegendLabel(boxPlot?.data),\n                color: boxPlot?.color,\n            }) as LegendData\n    )\n    // reduce to unique labels, then sort by id/index\n    // ensures correct ordering of legends even when certain group-subGroup combos are missing\n    return sortBy(\n        uniqBy(legendData, ({ label }) => label),\n        ({ id }) => id\n    )\n}\n", "import { Fragment, ReactNode, createElement, useMemo, forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { BoxPlotAnnotations } from './BoxPlotAnnotations'\nimport { BoxPlotLegends } from './BoxPlotLegends'\nimport {\n    BoxPlotCustomLayerProps,\n    BoxPlotDatum,\n    BoxPlotLayer,\n    BoxPlotLayerId,\n    BoxPlotSvgProps,\n} from './types'\nimport { svgDefaultProps } from './props'\nimport { useBoxPlot, useBoxPlotTransition } from './hooks'\n\ntype InnerBoxPlotProps<RawDatum extends BoxPlotDatum> = Omit<\n    BoxPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value = svgDefaultProps.value,\n    groupBy = svgDefaultProps.groupBy,\n    groups = svgDefaultProps.groups,\n    subGroupBy = svgDefaultProps.subGroupBy,\n    subGroups = svgDefaultProps.subGroups,\n    quantiles = svgDefaultProps.quantiles,\n    margin: partialMargin,\n    width,\n    height,\n    layout = svgDefaultProps.layout,\n    minValue = svgDefaultProps.minValue,\n    maxValue = svgDefaultProps.maxValue,\n    valueScale = svgDefaultProps.valueScale,\n    indexScale = svgDefaultProps.indexScale,\n    padding = svgDefaultProps.padding,\n    innerPadding = svgDefaultProps.innerPadding,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as BoxPlotLayer<RawDatum>[],\n    boxPlotComponent = svgDefaultProps.boxPlotComponent,\n    colorBy = svgDefaultProps.colorBy,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    medianWidth = svgDefaultProps.medianWidth,\n    medianColor = svgDefaultProps.medianColor,\n    whiskerWidth = svgDefaultProps.whiskerWidth,\n    whiskerColor = svgDefaultProps.whiskerColor,\n    whiskerEndSize = svgDefaultProps.whiskerEndSize,\n    markers = svgDefaultProps.markers,\n    legendLabel,\n    tooltipLabel = svgDefaultProps.tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    annotations = svgDefaultProps.annotations,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    boxPlotAriaLabel,\n    boxPlotAriaLabelledBy,\n    boxPlotAriaDescribedBy,\n    forwardedRef,\n}: InnerBoxPlotProps<RawDatum> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    } = useBoxPlot<RawDatum>({\n        data,\n        value,\n        groupBy,\n        groups,\n        subGroupBy,\n        subGroups,\n        quantiles,\n        width: innerWidth,\n        height: innerHeight,\n        layout,\n        minValue,\n        maxValue,\n        valueScale,\n        indexScale,\n        padding,\n        innerPadding,\n        colorBy,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        medianColor,\n        whiskerColor,\n        legendLabel,\n        tooltipLabel,\n        valueFormat,\n        legends,\n    })\n\n    const transition = useBoxPlotTransition({\n        boxPlots,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        animate,\n        springConfig,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: boxPlotAriaLabel,\n            ariaLabelledBy: boxPlotAriaLabelledBy,\n            ariaDescribedBy: boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            isFocusable,\n            boxPlotAriaLabel,\n            boxPlotAriaLabelledBy,\n            boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, boxPlots, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<BoxPlotLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        boxPlots: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BoxPlotAnnotations key=\"annotations\" boxPlots={boxPlots} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('boxPlots')) {\n        layerById.boxPlots = (\n            <Fragment key=\"boxPlots\">\n                {transition((animatedProps, boxPlot) =>\n                    createElement(boxPlotComponent, {\n                        ...commonProps,\n                        boxPlot,\n                        layout,\n                        animatedProps,\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BoxPlotLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsData}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BoxPlotCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        }),\n        [\n            commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const BoxPlot = forwardRef(\n    <RawDatum extends BoxPlotDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: BoxPlotSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            {...{\n                animate,\n                isInteractive,\n                motionConfig,\n                renderWrapper,\n                theme,\n            }}\n        >\n            <InnerBoxPlot<RawDatum>\n                isInteractive={isInteractive}\n                {...otherProps}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <RawDatum extends BoxPlotDatum>(\n    props: WithChartRef<BoxPlotSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n", "import { forwardRef, ReactElement, Ref } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { BoxPlotDatum, BoxPlotSvgProps } from './types'\nimport { BoxPlot } from './BoxPlot'\n\nexport const ResponsiveBoxPlot = forwardRef(\n    <RawDatum extends BoxPlotDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<BoxPlotSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BoxPlot<RawDatum> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends BoxPlotDatum>(\n    props: WithChartRef<ResponsiveProps<BoxPlotSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n"],
  "mappings": "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",
  "names": ["n", "i", "z", "z2", "t", "getPosition", "boxPlot", "x", "width", "y", "height", "getDimensions", "_ref", "size", "Math", "max", "BoxPlotAnnotations", "_ref2", "boxPlots", "annotations", "boundAnnotations", "useAnnotations", "data", "_jsx", "_Fragment", "children", "map", "annotation", "i", "Annotation", "_extends", "BoxPlotLegends", "legends", "_legend$data", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "BoxPlotItemWhisker", "distStart", "distEnd", "whiskerEndSize", "whiskerColor", "whiskerWidth", "_jsxs", "animated", "line", "x1", "x2", "y1", "y2", "strokeWidth", "stroke", "BoxPlotItem", "_boxPlot$fill", "layout", "_ref2$animatedProps", "animatedProps", "borderColor", "medianColor", "color", "opacity", "transform", "valueInterval", "valueDistance0", "valueDistance1", "valueDistance3", "valueDistance4", "borderRadius", "borderWidth", "medianWidth", "isInteractive", "onClick", "onMouseEnter", "onMouseLeave", "setActiveItem", "tooltip", "isFocusable", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "vertical", "bandwidth", "renderTooltip", "useMemo", "createElement", "handleClick", "useCallback", "event", "handleTooltip", "handleMouseEnter", "handleMouseLeave", "handleBlur", "g", "key", "onMouseMove", "onBlur", "focusable", "tabIndex", "rect", "rx", "ry", "fill", "defaultTranslation", "n", "mean", "min", "Summary", "Quantiles", "BoxPlotSummaryTooltip", "memo", "label", "formatted", "_ref$enableChip", "enableChip", "theme", "useTheme", "translation", "quantiles", "q", "values", "style", "container", "basic", "Chip", "chip", "display", "marginTop", "marginRight", "extrema", "defaultProps", "value", "groupBy", "groups", "subGroupBy", "subGroups", "minValue", "maxValue", "valueScale", "type", "indexScale", "round", "padding", "innerPadding", "activeOpacity", "inactiveOpacity", "axisTop", "axisRight", "axisBottom", "axisLeft", "enableGridX", "enableGridY", "valueFormat", "toPrecision", "colorBy", "colors", "scheme", "from", "modifiers", "tooltipLabel", "datum", "subGroup", "group", "markers", "svgDefaultProps", "layers", "boxPlotComponent", "defs", "animate", "motionConfig", "role", "generateBoxPlots", "formatValue", "valueScaleConfig", "indexScaleConfig", "getTooltipLabel", "_ref3", "axis", "computeScale", "all", "getIndexScale", "valueScaleSpec", "flat", "reduce", "acc", "Infinity", "_ref4", "xScale", "yScale", "nSubGroups", "length", "_ref$innerPadding", "Array", "_indexScale", "_valueScale", "_valueScale2", "groupIndex", "subGroupIndex", "indexCoordinate", "coords", "v", "intervals", "_Math$abs", "abs", "position", "String", "coordinates", "index", "_valueScale3", "getMean", "summarizeDistribution", "getValue", "every", "k", "Number", "sort", "a", "b", "quantile", "realIndex", "intIndex", "floor", "v1", "useLevels", "levels", "by", "getLevel", "usePropertyAccessor", "result", "Set", "d", "useBoxPlot", "_ref$groups", "_ref$subGroupBy", "_ref$subGroups", "_ref$quantiles", "_ref$valueScale", "_ref$indexScale", "_ref$padding", "_ref$colorBy", "_ref$colors", "legendLabel", "_ref$valueFormat", "_ref$legends", "getGroup", "getSubGroup", "useValueFormatter", "getColor", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getMedianColor", "getWhiskerColor", "dataStratified", "groupsMap", "subGroupsMap", "sg", "nGroups", "forEach", "_subGroupsMap$getSubG", "push", "dataSummary", "stratum", "_useMemo", "filter", "unStyledBoxPlots", "_useState", "useState", "activeItem", "activeKeys", "activeGroup", "activeSubGroup", "computedOpacity", "includes", "legendsData", "dataFrom", "getLegendLabel", "getPropertyAccessor", "byGroup", "legendData", "id", "sortBy", "uniqBy", "InnerBoxPlot", "_ref$value", "_ref$groupBy", "partialMargin", "margin", "_ref$layout", "_ref$minValue", "_ref$maxValue", "_ref$opacity", "_ref$activeOpacity", "_ref$inactiveOpacity", "_ref$axisBottom", "_ref$axisLeft", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "_ref$layers", "_ref$boxPlotComponent", "_ref$defs", "_ref$borderRadius", "_ref$borderWidth", "_ref$borderColor", "_ref$medianWidth", "_ref$medianColor", "_ref$whiskerWidth", "_ref$whiskerColor", "_ref$whiskerEndSize", "_ref$markers", "_ref$tooltipLabel", "_ref$isInteractive", "_ref$tooltip", "_ref$annotations", "_ref$role", "_ref$isFocusable", "boxPlotAriaLabel", "boxPlotAriaLabelledBy", "boxPlotAriaDescribedBy", "forwardedRef", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "_useBoxPlot", "transition", "getTransitionProps", "useTransition", "keys", "initial", "enter", "update", "leave", "immediate", "commonProps", "boundDefs", "bindDefs", "dataKey", "targetKey", "layerById", "axes", "grid", "Axes", "top", "right", "bottom", "left", "Fragment", "Grid", "xValues", "yValues", "CartesianMarkers", "layerContext", "SvgWrapper", "ref", "layer", "_layerById$layer", "BoxPlot", "forwardRef", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveBoxPlot", "defaultWidth", "defaultHeight", "onResize", "debounceResize", "props", "ResponsiveWrapper"]
}
