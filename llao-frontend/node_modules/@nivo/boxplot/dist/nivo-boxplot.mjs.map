{"version":3,"file":"nivo-boxplot.mjs","sources":["../src/BoxPlotAnnotations.tsx","../src/BoxPlotLegends.tsx","../src/BoxPlotItem.tsx","../src/BoxPlotTooltip.tsx","../src/props.ts","../src/compute/generation.ts","../src/compute/common.ts","../src/compute/stratification.ts","../src/hooks.ts","../src/compute/legends.ts","../src/BoxPlot.tsx","../src/ResponsiveBoxPlot.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BoxPlotAnnotationsProps, ComputedBoxPlotSummary } from './types'\n\nconst getPosition = (boxPlot: ComputedBoxPlotSummary) => ({\n    x: boxPlot.x + boxPlot.width / 2,\n    y: boxPlot.y + boxPlot.height / 2,\n})\n\nconst getDimensions = ({ width, height }: { width: number; height: number }) => ({\n    width,\n    height,\n    size: Math.max(width, height),\n})\n\nexport const BoxPlotAnnotations = ({ boxPlots, annotations }: BoxPlotAnnotationsProps) => {\n    const boundAnnotations = useAnnotations({\n        data: boxPlots,\n        annotations,\n        getPosition,\n        getDimensions,\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg, LegendProps } from '@nivo/legends'\nimport { LegendData } from './types'\n\ninterface BoxPlotLegendsProps {\n    width: number\n    height: number\n    legends: [LegendProps, LegendData[]][]\n}\n\nexport const BoxPlotLegends = ({ width, height, legends }: BoxPlotLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => {\n            // Advanced feature:\n            // Allow a legend spec to carry its own custom content via 'legend.data'\n            // Or fallback on content provided via 'data'\n            return (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                />\n            )\n        })}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, SpringValue } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BoxPlotDatum, BoxPlotItemProps } from './types'\n\nconst BoxPlotItemWhisker = ({\n    distStart,\n    distEnd,\n    whiskerEndSize,\n    whiskerColor,\n    whiskerWidth,\n}: {\n    distStart: SpringValue<number>\n    distEnd: SpringValue<number>\n    whiskerEndSize: number\n    whiskerColor: SpringValue<string>\n    whiskerWidth: number\n}) => {\n    return (\n        <>\n            <animated.line\n                x1={0}\n                x2={0}\n                y1={distStart}\n                y2={distEnd}\n                strokeWidth={whiskerWidth}\n                stroke={whiskerColor}\n            />\n            {whiskerEndSize > 0 ? (\n                <animated.line\n                    x1={-whiskerEndSize}\n                    x2={whiskerEndSize}\n                    y1={distEnd}\n                    y2={distEnd}\n                    strokeWidth={whiskerWidth}\n                    stroke={whiskerColor}\n                />\n            ) : null}\n        </>\n    )\n}\n\nexport const BoxPlotItem = <RawDatum extends BoxPlotDatum>({\n    boxPlot,\n    layout,\n    animatedProps: {\n        borderColor,\n        medianColor,\n        whiskerColor,\n        color,\n        opacity,\n        transform,\n        valueInterval,\n        valueDistance0,\n        valueDistance1,\n        valueDistance3,\n        valueDistance4,\n    },\n    borderRadius,\n    borderWidth,\n    medianWidth,\n    whiskerWidth,\n    whiskerEndSize,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    setActiveItem,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BoxPlotItemProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const vertical = layout === 'vertical'\n    const bandwidth = vertical ? boxPlot.width : boxPlot.height\n\n    const renderTooltip = useMemo(() => () => createElement(tooltip, boxPlot), [tooltip, boxPlot])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(boxPlot, event)\n        },\n        [boxPlot, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(boxPlot, event)\n            showTooltipFromEvent(renderTooltip(), event)\n            setActiveItem(boxPlot)\n        },\n        [boxPlot, onMouseEnter, showTooltipFromEvent, renderTooltip, setActiveItem]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(boxPlot, event)\n            hideTooltip()\n            setActiveItem(null)\n        },\n        [boxPlot, hideTooltip, onMouseLeave, setActiveItem]\n    )\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g\n            data-key={`boxplot.${boxPlot.key}`}\n            transform={transform}\n            opacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleTooltip : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            focusable={isFocusable}\n            tabIndex={isFocusable ? 0 : undefined}\n            aria-label={ariaLabel ? ariaLabel(boxPlot) : undefined}\n            aria-labelledby={ariaLabelledBy ? ariaLabelledBy(boxPlot) : undefined}\n            aria-describedby={ariaDescribedBy ? ariaDescribedBy(boxPlot) : undefined}\n        >\n            <animated.rect\n                x={-bandwidth / 2}\n                y={vertical ? valueDistance3 : valueDistance1}\n                width={bandwidth}\n                height={valueInterval}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={boxPlot.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n            />\n            <animated.line\n                x1={-bandwidth / 2}\n                x2={bandwidth / 2}\n                y1={0}\n                y2={0}\n                strokeWidth={medianWidth}\n                stroke={medianColor}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance1}\n                distEnd={valueDistance0}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance3}\n                distEnd={valueDistance4}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n        </animated.g>\n    )\n}\n","import { memo } from 'react'\nimport { Chip } from '@nivo/tooltip'\nimport { useTheme, Theme } from '@nivo/theming'\nimport { BoxPlotSummaryFormatted, BoxPlotTooltipProps, BoxPlotSummary } from './types'\n\ninterface BoxPlotSummaryTooltipProps {\n    label: string\n    formatted: BoxPlotSummaryFormatted\n    color?: string\n    enableChip?: boolean\n}\n\ntype Translation = Record<string, number | string>\n\nexport const defaultTranslation = {\n    n: 'n',\n    mean: 'mean',\n    min: 'min',\n    max: 'max',\n    Summary: 'Summary',\n    Quantiles: 'Quantiles',\n}\n\ntype ExtendedTheme = Theme & {\n    translation: Translation\n}\n\nconst hasTranslation = (theme: Theme | ExtendedTheme): theme is ExtendedTheme => {\n    return 'translation' in theme\n}\n\nexport const BoxPlotSummaryTooltip = memo<BoxPlotSummaryTooltipProps>(\n    ({ label, formatted, enableChip = false, color }) => {\n        const theme = useTheme()\n        let translation = defaultTranslation\n        if (hasTranslation(theme)) {\n            translation = {\n                ...defaultTranslation,\n                ...theme.translation,\n            }\n        }\n\n        const quantiles = formatted.quantiles.map((q, i) => (\n            <div key={'quantile.' + i}>\n                {q}%: <strong>{formatted.values[i]}</strong>\n            </div>\n        ))\n        return (\n            <div style={theme.tooltip.container}>\n                <div style={theme.tooltip.basic}>\n                    {enableChip && <Chip color={color ?? ''} style={theme.tooltip.chip} />}\n                    {label}\n                </div>\n                <div style={{ display: 'flex', marginTop: '1rem' }}>\n                    <div style={{ marginRight: '2rem' }}>\n                        <div>\n                            {translation.n}: <strong>{formatted.n}</strong>\n                        </div>\n                        <div style={{ marginTop: '1rem' }}>{translation.Summary}</div>\n                        <div>\n                            {translation.mean}: <strong>{formatted.mean}</strong>\n                        </div>\n                        <div>\n                            {translation.min}: <strong>{formatted.extrema[0]}</strong>\n                        </div>\n                        <div>\n                            {translation.max}: <strong>{formatted.extrema[1]}</strong>\n                        </div>\n                    </div>\n                    <div>\n                        <div>{translation.Quantiles}</div>\n                        {quantiles}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n)\n\nexport const BoxPlotTooltip = ({ color, label, formatted }: BoxPlotTooltipProps) => {\n    return (\n        <BoxPlotSummaryTooltip\n            label={label}\n            formatted={formatted}\n            enableChip={true}\n            color={color}\n        />\n    )\n}\n\nexport const BoxPlotTooltipLabel = (datum: BoxPlotSummary) => {\n    if (datum.subGroup) {\n        return datum.group + ' - ' + datum.subGroup\n    }\n    return datum.group\n}\n","import { BoxPlotItem } from './BoxPlotItem'\nimport { BoxPlotTooltip, BoxPlotTooltipLabel } from './BoxPlotTooltip'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleLinearSpec } from '@nivo/scales'\nimport { ComputedBoxPlotSummary } from './types'\n\nexport const defaultProps = {\n    value: 'value',\n    groupBy: 'group',\n    groups: null,\n    subGroupBy: null,\n    subGroups: null,\n\n    quantiles: [0.1, 0.25, 0.5, 0.75, 0.9],\n\n    layout: 'vertical' as const,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleLinearSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 6,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.25,\n\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    valueFormat: (value: number) => value.toPrecision(4),\n\n    colorBy: 'subGroup' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    medianWidth: 2,\n    medianColor: {\n        from: 'color',\n        modifiers: [['darker', 2.0]],\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    whiskerWidth: 2,\n    whiskerColor: {\n        from: 'color',\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n    whiskerEndSize: 0.6,\n\n    isInteractive: true,\n    tooltip: BoxPlotTooltip,\n    tooltipLabel: BoxPlotTooltipLabel,\n\n    legends: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'boxPlots', 'markers', 'legends', 'annotations'],\n    boxPlotComponent: BoxPlotItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n","import {\n    Scale,\n    ScaleBand,\n    computeScale,\n    ScaleBandSpec,\n    ScaleLinearSpec,\n    ScaleLogSpec,\n    ScaleSymlogSpec,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { BoxPlotSummary, ComputedBoxPlotSummary } from '../types'\nimport { getIndexScale } from './common'\n\ntype Params = {\n    data: BoxPlotSummary[]\n    formatValue: (value: number) => string\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n    innerPadding: number\n    groups: string[]\n    subGroups: string[]\n    indexScale: ScaleBand<string>\n    valueScale: Scale<number, number>\n    bandwidth: number\n    layout: 'vertical' | 'horizontal'\n}\n\nconst generateComputedBoxPlotSummaries = ({\n    data,\n    getTooltipLabel,\n    innerPadding = 0,\n    groups,\n    indexScale,\n    valueScale,\n    formatValue,\n    bandwidth,\n    layout,\n}: Params): ComputedBoxPlotSummary[] => {\n    if (bandwidth === 0) {\n        return Array<ComputedBoxPlotSummary>()\n    }\n    const vertical = layout === 'vertical'\n    return data.map(datum => {\n        const { group, subGroup, groupIndex, subGroupIndex, values } = datum\n        const indexCoordinate =\n            (indexScale(groups[groupIndex]) ?? 0) +\n            bandwidth * subGroupIndex +\n            innerPadding * subGroupIndex\n        const key = `${groupIndex}.${subGroupIndex}`\n        const coords = values.map(valueScale).map(v => v ?? 0)\n        const intervals = [0, 1, 2, 3].map(i => Math.abs(coords[i + 1] - coords[i]) ?? 0)\n        // top-left of rectangle and width/height depend on the layout\n        // (this conditional inside the loop is not ideal, but typical loops will be short)\n        const position = vertical\n            ? {\n                  x: indexCoordinate,\n                  y: valueScale(datum.values[3]) ?? 0,\n                  width: bandwidth,\n                  height: intervals[1] + intervals[2],\n              }\n            : {\n                  x: valueScale(datum.values[1]) ?? 0,\n                  y: indexCoordinate,\n                  width: intervals[1] + intervals[2],\n                  height: bandwidth,\n              }\n        return {\n            key,\n            group,\n            subGroup,\n            data: datum,\n            formatted: {\n                n: String(datum.n),\n                mean: formatValue(datum.mean),\n                extrema: datum.extrema.map(formatValue),\n                values: datum.values.map(formatValue),\n                quantiles: datum.quantiles.map(v => String(100 * v)),\n            },\n            ...position,\n            coordinates: {\n                index: indexCoordinate,\n                values: values.map(v => valueScale(v) ?? 0),\n            },\n            bandwidth,\n            label: getTooltipLabel(datum),\n            layout,\n        } as ComputedBoxPlotSummary\n    })\n}\n\nexport const generateBoxPlots = ({\n    data,\n    layout,\n    groups,\n    subGroups,\n    formatValue,\n    minValue,\n    maxValue,\n    width,\n    height,\n    padding,\n    innerPadding,\n    valueScale: valueScaleConfig,\n    indexScale: indexScaleConfig,\n    getTooltipLabel,\n}: {\n    data: BoxPlotSummary[]\n    layout: string\n    groups: string[] | null\n    subGroups: string[] | null\n    formatValue: (value: number) => string\n    minValue: 'auto' | number\n    maxValue: 'auto' | number\n    width: number\n    height: number\n    padding: number\n    innerPadding: number\n    valueScale: ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec\n    indexScale: ScaleBandSpec\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n}) => {\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(groups ?? [], padding, indexScaleConfig, size, otherAxis)\n\n    const valueScaleSpec = {\n        max: maxValue,\n        min: minValue,\n        ...valueScaleConfig,\n    }\n\n    const values = data.map((datum: BoxPlotSummary) => datum.values).flat()\n    const min = values.reduce((acc: number, value: number) => Math.min(acc, value), Infinity)\n    const max = values.reduce((acc: number, value: number) => Math.max(acc, value), -Infinity)\n\n    const valueScale = computeScale(\n        valueScaleSpec as ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec,\n        { all: [min, max], min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] =\n        layout === 'vertical' ? [indexScale, valueScale] : [valueScale, indexScale]\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (nSubGroups - 1)) / nSubGroups\n\n    const params = {\n        data,\n        groups,\n        subGroups,\n        getTooltipLabel,\n        innerPadding,\n        indexScale,\n        valueScale,\n        formatValue,\n        bandwidth,\n        layout,\n    } as Params\n    const boxPlots = generateComputedBoxPlotSummaries(params)\n\n    return { xScale, yScale, boxPlots }\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = (\n    groups: string[],\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(indexScale, { all: groups, min: 0, max: 0 }, size, axis) as ScaleBand<string>\n    ).padding(padding)\n}\n","import { BoxPlotDatum, BoxPlotCommonProps, BoxPlotSummary } from '../types'\nimport { defaultProps } from '../props'\n\n/** stratify an array of raw data objects into an array of arrays;\n * each array will create one box plot */\nexport const stratifyData = <RawDatum extends BoxPlotDatum>({\n    data,\n    groups = defaultProps.groups,\n    getGroup,\n    subGroups = defaultProps.subGroups,\n    getSubGroup,\n}: {\n    data: RawDatum[]\n    groups?: BoxPlotCommonProps<RawDatum>['groups']\n    getGroup: ((datum: RawDatum) => string) | null\n    subGroups?: BoxPlotCommonProps<RawDatum>['subGroups']\n    getSubGroup: ((datum: RawDatum) => string) | null\n}) => {\n    const groupsMap = {} as BoxPlotDatum\n    if (groups) {\n        groups.map((g, i) => (groupsMap[g] = i))\n    }\n    const subGroupsMap = {} as BoxPlotDatum\n    if (subGroups) {\n        subGroups.map((sg, i) => (subGroupsMap[sg] = i))\n    }\n\n    const nGroups = Math.max(1, groups ? groups.length : 1)\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const n = nGroups * nSubGroups\n    const result = Array(n)\n        .fill([])\n        .map(() => Array<RawDatum>())\n    data.forEach((d: RawDatum) => {\n        const groupIndex = getGroup ? Number(groupsMap[getGroup(d)]) : 0\n        const subGroupIndex = getSubGroup ? Number(subGroupsMap[getSubGroup(d)] ?? 0) : 0\n        const index = groupIndex * nSubGroups + subGroupIndex\n        if (index >= 0) {\n            result[index].push(d)\n        }\n    })\n    return result\n}\n\nconst getQuantile = (values: number[], quantile = 0.5) => {\n    const realIndex = (values.length - 1) * Math.max(0, Math.min(1, quantile))\n    const intIndex = Math.floor(realIndex)\n    if (realIndex === intIndex) return values[intIndex]\n    const v1 = values[intIndex],\n        v2 = values[intIndex + 1]\n    return v1 + (v2 - v1) * (realIndex - intIndex)\n}\n\nconst getMean = (values: number[]) => {\n    const sum = values.reduce((acc, x) => acc + x, 0)\n    return sum / values.length\n}\n\nconst isPrecomputedDistribution = <RawDatum>(\n    datum: RawDatum | Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'>\n): datum is Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'> => {\n    const preComputedKeys = ['values', 'extrema', 'mean', 'quantiles', 'group', 'subGroup', 'n']\n    return preComputedKeys.every(k => k in (datum as object))\n}\n\nexport const summarizeDistribution = <RawDatum extends BoxPlotDatum>({\n    data,\n    getValue,\n    groups,\n    subGroups,\n    groupIndex,\n    subGroupIndex,\n    quantiles,\n}: {\n    data: RawDatum[]\n    getValue: (datum: RawDatum) => unknown\n    groups: string[] | null\n    subGroups: string[] | null\n    groupIndex: number\n    subGroupIndex: number\n    quantiles: number[]\n}) => {\n    // accept a precomputed summary representation if it has all the required keys\n    if (data.length === 1 && isPrecomputedDistribution(data[0])) {\n        return {\n            groupIndex: groupIndex,\n            subGroupIndex: subGroupIndex,\n            ...data[0],\n        } as BoxPlotSummary\n    }\n    // compute the summary representation from raw data using quantiles\n    const values = data.map(v => Number(getValue(v))) as number[]\n    values.sort((a, b) => a - b)\n    return {\n        group: groups ? groups[groupIndex] : '',\n        groupIndex: groupIndex,\n        subGroup: subGroups ? subGroups[subGroupIndex] : '',\n        subGroupIndex: subGroupIndex,\n        n: values.length,\n        extrema: [values[0], values[values.length - 1]],\n        quantiles: quantiles,\n        values: quantiles.map(q => getQuantile(values, q)),\n        mean: getMean(values),\n    } as BoxPlotSummary\n}\n","import { useMemo, useState } from 'react'\nimport { SpringConfig, useTransition } from '@react-spring/web'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { PropertyAccessor, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    BoxPlotCommonProps,\n    BoxPlotDatum,\n    BoxPlotItemProps,\n    BoxPlotSummary,\n    ComputedBoxPlotSummary,\n    DataProps,\n    LegendData,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateBoxPlots, getLegendData, stratifyData, summarizeDistribution } from './compute'\nimport { LegendProps } from '@nivo/legends'\n\nexport const useLevels = <RawDatum extends BoxPlotDatum>(\n    levels: string[] | null,\n    data: RawDatum[],\n    by: PropertyAccessor<RawDatum, string> | null\n) => {\n    const getLevel = usePropertyAccessor(by ?? 'id')\n    if (levels) return levels\n    if (!by) return null\n    const result = new Set(data.map((d: RawDatum) => getLevel(d)))\n    return Array.from(result)\n}\n\nexport const useBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value,\n    groupBy,\n    groups = defaultProps.groups,\n    subGroupBy = defaultProps.subGroupBy,\n    subGroups = defaultProps.subGroups,\n    quantiles = defaultProps.quantiles,\n    width,\n    height,\n    layout,\n    minValue,\n    maxValue,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    colorBy = defaultProps.colorBy,\n    colors = defaultProps.colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    medianColor,\n    whiskerColor,\n    legendLabel,\n    tooltipLabel,\n    valueFormat = defaultProps.valueFormat,\n    legends = defaultProps.legends,\n}: {\n    data: DataProps<RawDatum>['data']\n    width: number\n    height: number\n} & Pick<\n    BoxPlotCommonProps<RawDatum>,\n    | 'value'\n    | 'groupBy'\n    | 'groups'\n    | 'subGroupBy'\n    | 'subGroups'\n    | 'quantiles'\n    | 'layout'\n    | 'minValue'\n    | 'maxValue'\n    | 'valueScale'\n    | 'indexScale'\n    | 'padding'\n    | 'innerPadding'\n    | 'colorBy'\n    | 'colors'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'medianColor'\n    | 'whiskerColor'\n    | 'legendLabel'\n    | 'tooltipLabel'\n    | 'valueFormat'\n    | 'legends'\n>) => {\n    // ensure that groups and subGroups are defined\n    groups = useLevels(groups, data, groupBy)\n    subGroups = useLevels(subGroups, data, subGroupBy)\n    const getGroup = usePropertyAccessor(groupBy ?? 'group')\n    const getSubGroup = usePropertyAccessor(subGroupBy ?? 'subGroup')\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    // trigger color fetch for all groups and subgroups\n    if (groups && colorBy === 'group') {\n        groups.map(group => getColor({ group } as BoxPlotSummary))\n    }\n    if (subGroups && colorBy === 'subGroup') {\n        subGroups.map(subGroup => getColor({ subGroup } as BoxPlotSummary))\n    }\n\n    const getBorderColor = useInheritedColor<ComputedBoxPlotSummary>(borderColor, theme)\n    const getMedianColor = useInheritedColor<ComputedBoxPlotSummary>(medianColor, theme)\n    const getWhiskerColor = useInheritedColor<ComputedBoxPlotSummary>(whiskerColor, theme)\n\n    // stratify long array with individual data points into arrays that will\n    // feed boxplot representations\n    const dataStratified = stratifyData({\n        data,\n        groups,\n        getGroup,\n        subGroups,\n        getSubGroup,\n    })\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const dataSummary = useMemo(\n        () =>\n            dataStratified.map((stratum: RawDatum[], index) =>\n                summarizeDistribution({\n                    data: stratum,\n                    getValue,\n                    groups,\n                    subGroups,\n                    groupIndex: Math.floor(index / nSubGroups),\n                    subGroupIndex: index % nSubGroups,\n                    quantiles,\n                })\n            ),\n        [dataStratified, getValue, groups, subGroups, nSubGroups, quantiles]\n    )\n\n    const {\n        boxPlots: unStyledBoxPlots,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            generateBoxPlots({\n                layout,\n                data: dataSummary.filter(stratum => stratum.n > 0),\n                groups,\n                subGroups,\n                formatValue,\n                minValue,\n                maxValue,\n                width,\n                height,\n                padding,\n                innerPadding,\n                valueScale,\n                indexScale,\n                getTooltipLabel,\n            }),\n        [\n            layout,\n            dataSummary,\n            groups,\n            subGroups,\n            formatValue,\n            minValue,\n            maxValue,\n            width,\n            height,\n            padding,\n            innerPadding,\n            valueScale,\n            indexScale,\n            getTooltipLabel,\n        ]\n    )\n\n    const [activeItem, setActiveItem] = useState<ComputedBoxPlotSummary | null>(null)\n    const activeKeys = useMemo(() => {\n        if (!activeItem) return []\n        const activeGroup = activeItem.group\n        const activeSubGroup = activeItem.subGroup\n        return unStyledBoxPlots\n            .filter(boxPlot => activeGroup === boxPlot.group || activeSubGroup === boxPlot.subGroup)\n            .map(boxPlot => boxPlot.key)\n    }, [unStyledBoxPlots, activeItem])\n\n    const boxPlots: ComputedBoxPlotSummary[] = useMemo(\n        () =>\n            unStyledBoxPlots.map(boxPlot => {\n                let computedOpacity = activeKeys.includes(boxPlot.key)\n                    ? activeOpacity\n                    : inactiveOpacity\n                if (!activeItem) {\n                    computedOpacity = opacity\n                }\n                return {\n                    ...boxPlot,\n                    color: getColor(boxPlot.data),\n                    opacity: computedOpacity,\n                }\n            }),\n        [\n            unStyledBoxPlots,\n            activeItem,\n            activeKeys,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            getColor,\n        ]\n    )\n\n    const legendsData: [LegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    boxPlots,\n                    dataFrom: colorBy,\n                    legendLabel,\n                })\n                return [legend, data]\n            }),\n        [legends, boxPlots, colorBy, legendLabel]\n    )\n\n    return {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    }\n}\n\nexport const useBoxPlotTransition = ({\n    boxPlots,\n    getBorderColor,\n    getMedianColor,\n    getWhiskerColor,\n    animate,\n    springConfig,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    getBorderColor: (d: ComputedBoxPlotSummary) => string\n    getMedianColor: (d: ComputedBoxPlotSummary) => string\n    getWhiskerColor: (d: ComputedBoxPlotSummary) => string\n    animate: boolean\n    springConfig: SpringConfig\n}) => {\n    const getTransitionProps = (boxPlot: ComputedBoxPlotSummary) => ({\n        borderColor: getBorderColor(boxPlot) as string,\n        medianColor: getMedianColor(boxPlot) as string,\n        whiskerColor: getWhiskerColor(boxPlot) as string,\n        color: boxPlot.color,\n        opacity: boxPlot.opacity,\n        valueInterval: Math.abs(boxPlot.coordinates.values[3] - boxPlot.coordinates.values[1]),\n        valueDistance0: boxPlot.coordinates.values[0] - boxPlot.coordinates.values[2],\n        valueDistance1: boxPlot.coordinates.values[1] - boxPlot.coordinates.values[2],\n        valueDistance3: boxPlot.coordinates.values[3] - boxPlot.coordinates.values[2],\n        valueDistance4: boxPlot.coordinates.values[4] - boxPlot.coordinates.values[2],\n        // translate to the midpoint of the median line\n        transform:\n            boxPlot.layout === 'vertical'\n                ? `translate(${boxPlot.x + boxPlot.width / 2}, ${boxPlot.coordinates.values[2]})`\n                : `translate(${boxPlot.coordinates.values[2]}, ${\n                      boxPlot.y + boxPlot.height / 2\n                  }) rotate(-90)`,\n    })\n\n    return useTransition<ComputedBoxPlotSummary, BoxPlotItemProps<BoxPlotDatum>['animatedProps']>(\n        boxPlots,\n        {\n            keys: boxPlot => boxPlot.key,\n            initial: animate ? undefined : null, // required for ssr\n            from: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            enter: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            update: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            leave: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n}\n","import { BoxPlotDatum, BoxPlotCommonProps, ComputedBoxPlotSummary, LegendData } from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\nimport sortBy from 'lodash/sortBy.js'\n\nexport const getLegendData = <RawDatum extends BoxPlotDatum>({\n    boxPlots,\n    dataFrom,\n    legendLabel,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    dataFrom: BoxPlotCommonProps<RawDatum>['colorBy']\n    legendLabel: BoxPlotCommonProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(legendLabel ?? dataFrom)\n    const byGroup = dataFrom === 'group'\n    const legendData = boxPlots.map(\n        boxPlot =>\n            // id & label are redundant below, but needed for ts in @nivo/legends\n            ({\n                id: byGroup ? boxPlot.data.groupIndex : boxPlot.data.subGroupIndex,\n                label: getLegendLabel(boxPlot?.data),\n                color: boxPlot?.color,\n            }) as LegendData\n    )\n    // reduce to unique labels, then sort by id/index\n    // ensures correct ordering of legends even when certain group-subGroup combos are missing\n    return sortBy(\n        uniqBy(legendData, ({ label }) => label),\n        ({ id }) => id\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo, forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { BoxPlotAnnotations } from './BoxPlotAnnotations'\nimport { BoxPlotLegends } from './BoxPlotLegends'\nimport {\n    BoxPlotCustomLayerProps,\n    BoxPlotDatum,\n    BoxPlotLayer,\n    BoxPlotLayerId,\n    BoxPlotSvgProps,\n} from './types'\nimport { svgDefaultProps } from './props'\nimport { useBoxPlot, useBoxPlotTransition } from './hooks'\n\ntype InnerBoxPlotProps<RawDatum extends BoxPlotDatum> = Omit<\n    BoxPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value = svgDefaultProps.value,\n    groupBy = svgDefaultProps.groupBy,\n    groups = svgDefaultProps.groups,\n    subGroupBy = svgDefaultProps.subGroupBy,\n    subGroups = svgDefaultProps.subGroups,\n    quantiles = svgDefaultProps.quantiles,\n    margin: partialMargin,\n    width,\n    height,\n    layout = svgDefaultProps.layout,\n    minValue = svgDefaultProps.minValue,\n    maxValue = svgDefaultProps.maxValue,\n    valueScale = svgDefaultProps.valueScale,\n    indexScale = svgDefaultProps.indexScale,\n    padding = svgDefaultProps.padding,\n    innerPadding = svgDefaultProps.innerPadding,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as BoxPlotLayer<RawDatum>[],\n    boxPlotComponent = svgDefaultProps.boxPlotComponent,\n    colorBy = svgDefaultProps.colorBy,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    medianWidth = svgDefaultProps.medianWidth,\n    medianColor = svgDefaultProps.medianColor,\n    whiskerWidth = svgDefaultProps.whiskerWidth,\n    whiskerColor = svgDefaultProps.whiskerColor,\n    whiskerEndSize = svgDefaultProps.whiskerEndSize,\n    markers = svgDefaultProps.markers,\n    legendLabel,\n    tooltipLabel = svgDefaultProps.tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    annotations = svgDefaultProps.annotations,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    boxPlotAriaLabel,\n    boxPlotAriaLabelledBy,\n    boxPlotAriaDescribedBy,\n    forwardedRef,\n}: InnerBoxPlotProps<RawDatum> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    } = useBoxPlot<RawDatum>({\n        data,\n        value,\n        groupBy,\n        groups,\n        subGroupBy,\n        subGroups,\n        quantiles,\n        width: innerWidth,\n        height: innerHeight,\n        layout,\n        minValue,\n        maxValue,\n        valueScale,\n        indexScale,\n        padding,\n        innerPadding,\n        colorBy,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        medianColor,\n        whiskerColor,\n        legendLabel,\n        tooltipLabel,\n        valueFormat,\n        legends,\n    })\n\n    const transition = useBoxPlotTransition({\n        boxPlots,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        animate,\n        springConfig,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: boxPlotAriaLabel,\n            ariaLabelledBy: boxPlotAriaLabelledBy,\n            ariaDescribedBy: boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            isFocusable,\n            boxPlotAriaLabel,\n            boxPlotAriaLabelledBy,\n            boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, boxPlots, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<BoxPlotLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        boxPlots: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BoxPlotAnnotations key=\"annotations\" boxPlots={boxPlots} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('boxPlots')) {\n        layerById.boxPlots = (\n            <Fragment key=\"boxPlots\">\n                {transition((animatedProps, boxPlot) =>\n                    createElement(boxPlotComponent, {\n                        ...commonProps,\n                        boxPlot,\n                        layout,\n                        animatedProps,\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BoxPlotLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsData}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BoxPlotCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        }),\n        [\n            commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const BoxPlot = forwardRef(\n    <RawDatum extends BoxPlotDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: BoxPlotSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            {...{\n                animate,\n                isInteractive,\n                motionConfig,\n                renderWrapper,\n                theme,\n            }}\n        >\n            <InnerBoxPlot<RawDatum>\n                isInteractive={isInteractive}\n                {...otherProps}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <RawDatum extends BoxPlotDatum>(\n    props: WithChartRef<BoxPlotSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, ReactElement, Ref } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { BoxPlotDatum, BoxPlotSvgProps } from './types'\nimport { BoxPlot } from './BoxPlot'\n\nexport const ResponsiveBoxPlot = forwardRef(\n    <RawDatum extends BoxPlotDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<BoxPlotSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BoxPlot<RawDatum> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends BoxPlotDatum>(\n    props: WithChartRef<ResponsiveProps<BoxPlotSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n"],"names":["getPosition","boxPlot","x","width","y","height","getDimensions","_ref","size","Math","max","BoxPlotAnnotations","_ref2","boxPlots","annotations","boundAnnotations","useAnnotations","data","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BoxPlotLegends","legends","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","BoxPlotItemWhisker","distStart","distEnd","whiskerEndSize","whiskerColor","whiskerWidth","_jsxs","animated","line","x1","x2","y1","y2","strokeWidth","stroke","BoxPlotItem","_boxPlot$fill","layout","_ref2$animatedProps","animatedProps","borderColor","medianColor","color","opacity","transform","valueInterval","valueDistance0","valueDistance1","valueDistance3","valueDistance4","borderRadius","borderWidth","medianWidth","isInteractive","onClick","onMouseEnter","onMouseLeave","setActiveItem","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","vertical","bandwidth","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleBlur","g","key","undefined","onMouseMove","onBlur","focusable","tabIndex","rect","rx","ry","fill","defaultTranslation","n","mean","min","Summary","Quantiles","BoxPlotSummaryTooltip","memo","label","formatted","_ref$enableChip","enableChip","theme","useTheme","translation","hasTranslation","quantiles","q","values","style","container","basic","Chip","chip","display","marginTop","marginRight","extrema","defaultProps","value","groupBy","groups","subGroupBy","subGroups","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","activeOpacity","inactiveOpacity","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","valueFormat","toPrecision","colorBy","colors","scheme","from","modifiers","tooltipLabel","datum","subGroup","group","markers","svgDefaultProps","layers","boxPlotComponent","defs","animate","motionConfig","role","generateBoxPlots","formatValue","valueScaleConfig","indexScaleConfig","getTooltipLabel","_ref3","axis","computeScale","all","getIndexScale","valueScaleSpec","flat","reduce","acc","Infinity","_ref4","xScale","yScale","nSubGroups","length","_ref$innerPadding","Array","_indexScale","_valueScale","_valueScale2","groupIndex","subGroupIndex","indexCoordinate","coords","v","intervals","_Math$abs","abs","position","String","coordinates","index","_valueScale3","generateComputedBoxPlotSummaries","getMean","summarizeDistribution","getValue","every","k","Number","sort","a","b","quantile","realIndex","intIndex","floor","v1","getQuantile","useLevels","levels","by","getLevel","usePropertyAccessor","result","Set","d","useBoxPlot","_ref$groups","_ref$subGroupBy","_ref$subGroups","_ref$quantiles","_ref$valueScale","_ref$indexScale","_ref$padding","_ref$colorBy","_ref$colors","legendLabel","_ref$valueFormat","_ref$legends","getGroup","getSubGroup","useValueFormatter","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getMedianColor","getWhiskerColor","dataStratified","groupsMap","subGroupsMap","sg","nGroups","forEach","_subGroupsMap$getSubG","push","stratifyData","dataSummary","stratum","_useMemo","filter","unStyledBoxPlots","_useState","useState","activeItem","activeKeys","activeGroup","activeSubGroup","computedOpacity","includes","legendsData","dataFrom","getLegendLabel","getPropertyAccessor","byGroup","legendData","id","sortBy","uniqBy","getLegendData","InnerBoxPlot","_ref$value","_ref$groupBy","partialMargin","margin","_ref$layout","_ref$minValue","_ref$maxValue","_ref$opacity","_ref$activeOpacity","_ref$inactiveOpacity","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$boxPlotComponent","_ref$defs","_ref$borderRadius","_ref$borderWidth","_ref$borderColor","_ref$medianWidth","_ref$medianColor","_ref$whiskerWidth","_ref$whiskerColor","_ref$whiskerEndSize","_ref$markers","_ref$tooltipLabel","_ref$isInteractive","_ref$tooltip","_ref$annotations","_ref$role","_ref$isFocusable","boxPlotAriaLabel","boxPlotAriaLabelledBy","boxPlotAriaDescribedBy","forwardedRef","_useMotionConfig","useMotionConfig","springConfig","config","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBoxPlot","transition","getTransitionProps","useTransition","keys","initial","enter","update","leave","immediate","useBoxPlotTransition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","top","right","bottom","left","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","ref","layer","_layerById$layer","BoxPlot","forwardRef","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveBoxPlot","defaultWidth","defaultHeight","onResize","debounceResize","props","ResponsiveWrapper"],"mappings":"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"}